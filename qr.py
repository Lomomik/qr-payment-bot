#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã
–†–∞–±–æ—Ç–∞–µ—Ç —Å —á–µ—à—Å–∫–∏–º–∏ –±–∞–Ω–∫–∞–º–∏ (Air Bank, Raiffeisenbank CZ)
"""

import os
import logging
import asyncio
import qrcode
from io import BytesIO
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç keep-alive –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ Render
try:
    from render_keep_alive import setup_render_keep_alive
except ImportError:
    logger.warning("render_keep_alive module not found, keep-alive disabled")
    setup_render_keep_alive = None

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_TELEGRAM_ID = os.getenv('ADMIN_TELEGRAM_ID')
OWNER_NAME = os.getenv('OWNER_NAME', 'ULIANA EMELINA')
ACCOUNT_NUMBER = os.getenv('ACCOUNT_NUMBER', '3247217010/3030')
IBAN = 'CZ3230300000003247217010'

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
user_stats = {}

# –£—Å–ª—É–≥–∏ —Å–∞–ª–æ–Ω–∞ - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏
SERVICES = {
    # –£—Å–ª—É–≥–∏ –¥–ª—è –±—Ä–æ–≤–µ–π (üåø)
    'uprava_barveni': 'üåø √öPRAVA A BARVEN√ç',
    'uprava': 'üåø √öPRAVA',
    'zesvetleni_uprava_tonovani': 'üåø ZESVƒöTLEN√ç S √öPRAVOU A TONOV√ÅN√çM',
    'laminace_uprava_tonovani': 'üåø LAMINACE S √öPRAVOU A TONOV√ÅN√çM',
    
    # –£—Å–ª—É–≥–∏ –¥–ª—è —Ä–µ—Å–Ω–∏—Ü (üëÅÔ∏è –∏ ‚ú®)
    'laminace_ras': 'üëÅÔ∏è LAMINACE ≈òAS',
    'barveni_ras': 'üëÅÔ∏è BARVEN√ç ≈òAS',
    'laminace_ras_uprava_barveni': '‚ú® LAMINACE ≈òAS + √öPRAVA A BARVEN√ç OBOƒå√ç',
    'laminace_ras_zesvetleni': '‚ú® LAMINACE ≈òAS + ZESVƒöTLEN√ç OBOƒå√ç S T√ìNOV√ÅN√çM',
    'laminace_oboci_ras': '‚ú® LAMINACE OBOƒå√ç A ≈òAS',
    'depilace_obliceje': 'üåø DEPILACE OBLIƒåEJE',
    # –ö—Ä–∞—Å–æ—Ç–∞ –∏ —Å—Ç–∏–ª—å (üíÑ)
    'liceni_uces': 'üëÑ L√çƒåEN√ç & √öƒåES',
    'liceni': 'üëÑ L√çƒåEN√ç',
    'uces': 'üëÑ √öƒåES',
    
}

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [KeyboardButton('üí∞ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã')],
        [KeyboardButton('‚ÑπÔ∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å—á–µ—Ç–∞'), KeyboardButton('‚ùì –ü–æ–º–æ—â—å')]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

def get_services_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —É—Å–ª—É–≥"""
    keyboard = []
    services_list = list(SERVICES.items())
    
    # –ü–µ—Ä–≤—ã–µ —É—Å–ª—É–≥–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
    for i in range(len(services_list) - 4):
        service_key, service_name = services_list[i]
        keyboard.append([InlineKeyboardButton(service_name, callback_data=f"service_{service_key}")])
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —É—Å–ª—É–≥–∏ –≤ 2 —Ä—è–¥–∞ –ø–æ 2
    last_four = services_list[-4:]
    for i in range(0, 4, 2):
        row = []
        for j in range(2):
            if i + j < len(last_four):
                service_key, service_name = last_four[i + j]
                row.append(InlineKeyboardButton(service_name, callback_data=f"service_{service_key}"))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏"
    keyboard.append([InlineKeyboardButton("‚ùå –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏", callback_data="service_none")])
    
    return InlineKeyboardMarkup(keyboard)

def get_amount_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º –≤—ã–±–æ—Ä–æ–º —Å—É–º–º—ã"""
    keyboard = []
    amounts = range(500, 1900, 100)  # –æ—Ç 500 –¥–æ 1800 —Å —à–∞–≥–æ–º 100
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    row = []
    for amount in amounts:
        row.append(InlineKeyboardButton(f"{amount} CZK", callback_data=f"amount_{amount}"))
        if len(row) == 3:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if row:
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Å—É–º–º—ã
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É", callback_data="amount_custom")])
    
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_stats[user_id] = user_stats.get(user_id, 0) + 1
    
    await update.message.reply_text(
        'üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ–ø–ª–∞—Ç—ã —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã No√©me!\n\n'
        'üí∞ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥.\n\n'
        'üì± –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n'
        '‚Ä¢ –ö–ª–∏–µ–Ω—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç QR-–∫–æ–¥ —Å–≤–æ–∏–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º\n'
        '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n'
        '‚Ä¢ –û—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂\n\n'
        'üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:',
        reply_markup=get_main_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        'üìã **–ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –°–û–¢–†–£–î–ù–ò–ö–ê**\n\n'
        '**–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥:**\n'
        '1Ô∏è‚É£ –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥\n'
        '2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí∞ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã"\n'
        '3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –∫—Ä–æ–Ω–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1400)\n'
        '4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ "–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏"\n'
        '5Ô∏è‚É£ –ü–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ –∫–ª–∏–µ–Ω—Ç—É\n'
        '6Ô∏è‚É£ –ö–ª–∏–µ–Ω—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–¥ –≤ —Å–≤–æ–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n\n'
        'üí° QR-–∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!',
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info"""
    await update.message.reply_text(
        f'üìã **–†–ï–ö–í–ò–ó–ò–¢–´ –°–ß–ï–¢–ê –°–ê–õ–û–ù–ê**\n\n'
        f'üë§ **–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** {OWNER_NAME}\n'
        f'üè¶ **–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞:** {ACCOUNT_NUMBER}\n'
        f'üåç **IBAN:** {IBAN}\n'
        f'üí± **–í–∞–ª—é—Ç–∞:** CZK (—á–µ—à—Å–∫–∏–µ –∫—Ä–æ–Ω—ã)\n\n'
        f'üí∞ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

async def payment_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    user_id = update.effective_user.id
    user_stats[user_id] = user_stats.get(user_id, 0) + 1
    
    await update.message.reply_text(
        'üåø <b>–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã</b>\n\n'
        '<b>–®–∞–≥–∏:</b>\n'
        '1Ô∏è‚É£ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—É–º–º—É –∑–∞ —É—Å–ª—É–≥—É –≤ <b>Fresha Partner</b>\n'
        '2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é\n'
        '3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É\n'
        '4Ô∏è‚É£ –ü–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ –∫–ª–∏–µ–Ω—Ç—É\n\n'
        'üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:</b>',
        reply_markup=get_amount_keyboard(),
        parse_mode='HTML'
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã
    context.user_data['waiting_for_amount'] = True

def generate_qr_code(amount: float, service_msg: str = None) -> BytesIO:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    # –¢–æ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Air Bank —Å —É—Å–ª—É–≥–æ–π
    # –§–æ—Ä–º–∞—Ç: SPD*1.0*ACC:CZ3230300000003247217010*RN:ULIANA EMELINA*AM:500*CC:CZK*MSG:ZESVETLENI OBOCI
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ, –∏–Ω–∞—á–µ —Å –∑–∞–ø—è—Ç–æ–π
    if amount == int(amount):
        formatted_amount = str(int(amount))
    else:
        formatted_amount = f"{amount:.2f}".replace('.', ',')
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π QR —Ç–µ–∫—Å—Ç
    qr_text = f"SPD*1.0*ACC:{IBAN}*RN:{OWNER_NAME.upper()}*AM:{formatted_amount}*CC:CZK"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if service_msg:
        qr_text += f"*MSG:{service_msg}"
    
    # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(qr_text)
    qr.make(fit=True)
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = qr.make_image(fill_color="black", back_color="white")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
    bio = BytesIO()
    img.save(bio, 'PNG')
    bio.seek(0)
    
    return bio

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏ –∏ —Å—É–º–º—ã)"""
    text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text == 'üí∞ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã':
        await payment_command(update, context)
        return
    elif text == '‚ÑπÔ∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å—á–µ—Ç–∞':
        await info_command(update, context)
        return
    elif text == '‚ùì –ü–æ–º–æ—â—å':
        await help_command(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    if context.user_data.get('waiting_for_amount'):
        await handle_amount(update, context)
    else:
        await update.message.reply_text(
            '‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n'
            'üí∞ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ - –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞\n'
            '‚ÑπÔ∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å—á–µ—Ç–∞ - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤\n'
            '‚ùì –ü–æ–º–æ—â—å - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π',
            reply_markup=get_main_keyboard()
        )

async def handle_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
    try:
        # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
        amount_text = update.message.text.strip().replace(',', '.')
        amount = float(amount_text)
        
        if amount <= 0:
            await update.message.reply_text(
                '‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!\n'
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
            )
            return
        
        if amount > 1000000:
            await update.message.reply_text(
                '‚ùå –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è!\n'
                '–ú–∞–∫—Å–∏–º—É–º: 1,000,000 CZK'
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['amount'] = amount
        context.user_data['waiting_for_amount'] = False
        context.user_data['waiting_for_service'] = True
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_amount = f"{amount:,.2f}".replace(',', ' ').replace('.', ',')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—Å–ª—É–≥
        await update.message.reply_text(
            f'üí∞ –°—É–º–º–∞: {formatted_amount} CZK\n\n'
            'üåø –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤ –ø–ª–∞—Ç–µ–∂–µ:\n'
            'üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É',
            reply_markup=get_services_keyboard()
        )
        
        logger.info(f"Amount {amount} CZK saved, waiting for service selection, user: {update.effective_user.id}")
        
    except ValueError:
        await update.message.reply_text(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!\n\n'
            'üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n'
            '‚Ä¢ –¶–µ–ª—ã–µ —á–∏—Å–ª–∞: 500, 1000\n'
            '‚Ä¢ –î–µ—Å—è—Ç–∏—á–Ω—ã–µ: 500.50, 1000.25\n\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
        )

async def handle_amount_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if not context.user_data.get('waiting_for_amount'):
        await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Å—É–º–º—ã.')
        return
    
    if query.data == 'amount_custom':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É
        await query.edit_message_text(
            '‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É</b>\n\n'
            'üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n'
            '‚Ä¢ –¶–µ–ª—ã–µ —á–∏—Å–ª–∞: 500, 1000\n'
            '‚Ä¢ –î–µ—Å—è—Ç–∏—á–Ω—ã–µ: 500.50, 1000.25\n\n'
            'üëá –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:',
            parse_mode='HTML'
        )
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è waiting_for_amount=True –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ callback_data
    amount_str = query.data.replace('amount_', '')
    try:
        amount = float(amount_str)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['amount'] = amount
        context.user_data['waiting_for_amount'] = False
        context.user_data['waiting_for_service'] = True
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_amount = f"{amount:,.2f}".replace(',', ' ').replace('.', ',')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—Å–ª—É–≥
        await query.edit_message_text(
            f'üí∞ –°—É–º–º–∞: {formatted_amount} CZK\n\n'
            'üåø –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤ –ø–ª–∞—Ç–µ–∂–µ:\n'
            'üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É',
            reply_markup=get_services_keyboard()
        )
        
        logger.info(f"Amount {amount} CZK selected via button, waiting for service selection, user: {update.effective_user.id}")
        
    except ValueError:
        await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.')

async def handle_service_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
    query = update.callback_query
    await query.answer()
    
    if not context.user_data.get('waiting_for_service'):
        await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É.')
        return
    
    amount = context.user_data.get('amount')
    if not amount:
        await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É
    service_key = query.data.replace('service_', '')
    
    if service_key == 'none':
        service_name = None
        service_msg = None
        caption_service = ''
    else:
        service_name = SERVICES.get(service_key)
        if service_name:
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è QR-–∫–æ–¥–∞
            service_msg = service_name.split(' ', 1)[1] if ' ' in service_name else service_name
            caption_service = f'üõçÔ∏è –£—Å–ª—É–≥–∞: {service_msg}\n'
        else:
            service_name = None
            service_msg = None
            caption_service = ''
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ —Å —É—Å–ª—É–≥–æ–π
    qr_image = generate_qr_code(amount, service_msg)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatted_amount = f"{amount:,.2f}".replace(',', ' ').replace('.', ',')
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
    await query.delete_message()
    await context.bot.send_photo(
        chat_id=query.message.chat_id,
        photo=qr_image,
        caption=f'üåø QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥ —Å–∞–ª–æ–Ω–∞\n\n'
               f'üí∞ –°—É–º–º–∞: {formatted_amount} CZK\n'
               f'{caption_service}'
               f'üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {OWNER_NAME}\n'
               f'üè¶ –°—á–µ—Ç: {ACCOUNT_NUMBER}\n\n'
               f'üì± –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –∫–ª–∏–µ–Ω—Ç—É\n'
               f'‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–¥ –≤ —Å–≤–æ–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
        reply_markup=get_main_keyboard()
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data['waiting_for_service'] = False
    context.user_data['amount'] = None
    
    service_log = service_name if service_name else "without service"
    logger.info(f"QR code generated for amount: {amount} CZK, service: {service_log}, user: {update.effective_user.id}")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = str(update.effective_user.id)
    
    if user_id != ADMIN_TELEGRAM_ID:
        await update.message.reply_text('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')
        return
    
    total_users = len(user_stats)
    total_requests = sum(user_stats.values())
    
    stats_text = f'üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**\n\n'
    stats_text += f'üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n'
    stats_text += f'üì± –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n\n'
    
    if user_stats:
        stats_text += '**–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n'
        sorted_users = sorted(user_stats.items(), key=lambda x: x[1], reverse=True)
        for i, (uid, count) in enumerate(sorted_users[:5], 1):
            stats_text += f'{i}. User {uid}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤\n'
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    await update.message.reply_text(
        '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!\n\n'
        'üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:',
        reply_markup=get_main_keyboard()
    )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not found in environment variables!")
        return
    
    logger.info("Starting QR Payment Bot...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ keep-alive –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ Render
    if os.getenv('RENDER') and setup_render_keep_alive:
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è application
            asyncio.create_task(setup_render_keep_alive())
            logger.info("‚úÖ Render keep-alive activated")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Keep-alive setup failed: {e}")
    elif os.getenv('RENDER'):
        logger.warning("‚ö†Ô∏è Running on Render but keep-alive module not available")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("info", info_command))
    application.add_handler(CommandHandler("payment", payment_command))
    application.add_handler(CommandHandler("stats", stats_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º (inline –∫–Ω–æ–ø–∫–∏)
    application.add_handler(CallbackQueryHandler(handle_amount_selection, pattern=r'^amount_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥ (inline –∫–Ω–æ–ø–∫–∏)
    application.add_handler(CallbackQueryHandler(handle_service_selection, pattern=r'^service_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏ –∏ —Å—É–º–º—ã)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Starting bot...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
