#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Enhanced QR Payment Bot with ConversationHandler
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ConversationHandler –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
"""

import logging
import os
import qrcode
from io import BytesIO
from decimal import Decimal, InvalidOperation
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from telegram.constants import ParseMode
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_TELEGRAM_ID = int(os.getenv('ADMIN_TELEGRAM_ID', 0))
OWNER_NAME = os.getenv('OWNER_NAME', '–í–õ–ê–î–ï–õ–ï–¶')
ACCOUNT_NUMBER = os.getenv('ACCOUNT_NUMBER', '1234567890/1234')

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
SELECTING_AMOUNT, SELECTING_SERVICE, CONFIRMING_PAYMENT = range(3)

# –£—Å–ª—É–≥–∏ —Å —ç–º–æ–¥–∑–∏-–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π
SERVICES = {
    'brow_correction': 'üåø √öPRAVA OBOƒå√ç',
    'brow_coloring': 'üåø BARVEN√ç OBOƒå√ç',
    'brow_lamination': 'üåø LAMINACE OBOƒå√ç',
    'brow_styling': 'üåø STYLING OBOƒå√ç',
    'lash_lamination': 'üëÅÔ∏è LAMINACE ≈òAS',
    'lash_coloring': 'üëÅÔ∏è BARVEN√ç ≈òAS',
    'lash_extension': 'üëÅÔ∏è PRODLU≈ΩOV√ÅN√ç ≈òAS',
    'combo_lash_brow': '‚ú® LAMINACE ≈òAS + OBOƒå√ç',
    'combo_full': '‚ú® KOMPLEXN√ç P√âƒåE',
    'makeup': 'üëÑ L√çƒåEN√ç',
    'hairstyle': 'üëÑ √öƒåES',
    'consultation': 'üí¨ KONZULTACE'
}

def format_amount_czech(amount):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –≤ —á–µ—à—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–∑–∞–ø—è—Ç–∞—è –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)"""
    try:
        decimal_amount = Decimal(str(amount))
        return f"{decimal_amount:.2f}".replace('.', ',')
    except (InvalidOperation, ValueError):
        return "0,00"

def generate_qr_code(amount, service_name):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –¥–ª—è —á–µ—à—Å–∫–æ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ SPD"""
    iban = f"CZ{ACCOUNT_NUMBER.replace('/', '')}"
    formatted_amount = format_amount_czech(amount)
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SPD –¥–ª—è —á–µ—à—Å–∫–∏—Ö –±–∞–Ω–∫–æ–≤
    qr_data = f"SPD*1.0*ACC:{iban}*RN:{OWNER_NAME.upper()}*AM:{formatted_amount}*CC:CZK*MSG:{service_name}"
    
    qr = qrcode.QRCode(version=1, box_size=10, border=5)
    qr.add_data(qr_data)
    qr.make(fit=True)
    
    img = qr.make_image(fill_color="black", back_color="white")
    bio = BytesIO()
    img.save(bio, 'PNG')
    bio.seek(0)
    
    return bio

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Å—É–º–º—ã"""
    user = update.effective_user
    logger.info(f"User {user.id} ({user.first_name}) started the bot")
    
    welcome_text = f"""
üå∏ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã No√©me!</b> üå∏

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥.

–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã:
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—É–º–º–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton("500 Kƒç", callback_data="amount_500"),
            InlineKeyboardButton("700 Kƒç", callback_data="amount_700"),
            InlineKeyboardButton("900 Kƒç", callback_data="amount_900")
        ],
        [
            InlineKeyboardButton("1100 Kƒç", callback_data="amount_1100"),
            InlineKeyboardButton("1300 Kƒç", callback_data="amount_1300"),
            InlineKeyboardButton("1500 Kƒç", callback_data="amount_1500")
        ],
        [
            InlineKeyboardButton("1700 Kƒç", callback_data="amount_1700"),
            InlineKeyboardButton("1800 Kƒç", callback_data="amount_1800"),
        ],
        [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É", callback_data="amount_custom")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(welcome_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text(welcome_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    
    return SELECTING_AMOUNT

async def handle_amount_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "amount_custom":
        await query.edit_message_text(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —á–µ—à—Å–∫–∏—Ö –∫—Ä–æ–Ω–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1250)\n\n"
            "–ú–∏–Ω–∏–º—É–º: 1 Kƒç, –ú–∞–∫—Å–∏–º—É–º: 1,000,000 Kƒç",
            parse_mode=ParseMode.HTML
        )
        return SELECTING_AMOUNT  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ callback_data
    amount = int(query.data.split('_')[1])
    context.user_data['amount'] = amount
    
    logger.info(f"User {query.from_user.id} selected amount: {amount} Kƒç")
    
    return await show_service_selection(update, context)

async def handle_custom_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã"""
    try:
        amount = float(update.message.text.replace(',', '.'))
        
        if amount <= 0:
            await update.message.reply_text(
                "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode=ParseMode.HTML
            )
            return SELECTING_AMOUNT
        
        if amount > 1000000:
            await update.message.reply_text(
                "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1,000,000 Kƒç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode=ParseMode.HTML
            )
            return SELECTING_AMOUNT
        
        context.user_data['amount'] = amount
        logger.info(f"User {update.effective_user.id} entered custom amount: {amount} Kƒç")
        
        return await show_service_selection(update, context)
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1250 –∏–ª–∏ 1250.50):",
            parse_mode=ParseMode.HTML
        )
        return SELECTING_AMOUNT

async def show_service_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Å–ª—É–≥"""
    amount = context.user_data.get('amount')
    
    text = f"""
üí∞ <b>–°—É–º–º–∞: {amount} Kƒç</b>

–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏
    services_list = list(SERVICES.items())
    keyboard = []
    
    # –ü–µ—Ä–≤—ã–µ —É—Å–ª—É–≥–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
    for i in range(0, min(8, len(services_list))):
        service_key, service_name = services_list[i]
        keyboard.append([InlineKeyboardButton(service_name, callback_data=f"service_{service_key}")])
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —É—Å–ª—É–≥–∏ –≤ –≤–∏–¥–µ —Å–µ—Ç–∫–∏ 2x2
    if len(services_list) > 8:
        remaining_services = services_list[8:]
        for i in range(0, len(remaining_services), 2):
            row = []
            for j in range(2):
                if i + j < len(remaining_services):
                    service_key, service_name = remaining_services[i + j]
                    # –£–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                    short_name = service_name.split(' ', 1)[1] if ' ' in service_name else service_name
                    row.append(InlineKeyboardButton(short_name, callback_data=f"service_{service_key}"))
            if row:
                keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏"
    keyboard.append([InlineKeyboardButton("üéØ –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏", callback_data="service_none")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—É–º–º—ã", callback_data="back_to_amount")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    
    return SELECTING_SERVICE

async def handle_service_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_amount":
        return await start(update, context)
    
    service_key = query.data.split('_', 1)[1]
    
    if service_key == "none":
        service_name = "–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ —Å–∞–ª–æ–Ω–∞"
        display_service = "–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏"
    else:
        service_name = SERVICES.get(service_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞")
        display_service = service_name
    
    context.user_data['service'] = service_name
    context.user_data['service_display'] = display_service
    
    logger.info(f"User {query.from_user.id} selected service: {service_name}")
    
    return await show_payment_confirmation(update, context)

async def show_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    amount = context.user_data.get('amount')
    service_display = context.user_data.get('service_display')
    
    text = f"""
üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞</b>

üí∞ <b>–°—É–º–º–∞:</b> {amount} Kƒç
üéØ <b>–£—Å–ª—É–≥–∞:</b> {service_display}
üè¶ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {OWNER_NAME}

–í—Å–µ –≤–µ—Ä–Ω–æ? –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã?
"""
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥", callback_data="confirm_payment"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="back_to_service")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    
    return CONFIRMING_PAYMENT

async def handle_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel_payment":
        await query.edit_message_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.",
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END
    
    if query.data == "back_to_service":
        return await show_service_selection(update, context)
    
    if query.data == "confirm_payment":
        amount = context.user_data.get('amount')
        service_name = context.user_data.get('service')
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
            qr_image = generate_qr_code(amount, service_name)
            
            caption = f"""
‚úÖ <b>QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!</b>

üí∞ <b>–°—É–º–º–∞:</b> {amount} Kƒç
üéØ <b>–£—Å–ª—É–≥–∞:</b> {context.user_data.get('service_display')}
üè¶ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {OWNER_NAME}

üì± <b>–î–ª—è –æ–ø–ª–∞—Ç—ã:</b>
1. –û—Ç–∫—Ä–æ–π—Ç–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
2. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥
3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂

üè™ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∞–Ω–∫–∏:</b> Air Bank, Raiffeisenbank CZ
"""
            
            await query.edit_message_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=qr_image,
                caption=caption,
                parse_mode=ParseMode.HTML
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            main_menu = ReplyKeyboardMarkup([
                [KeyboardButton("üí≥ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂")],
                [KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), KeyboardButton("üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã")]
            ], resize_keyboard=True, one_time_keyboard=False)
            
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:",
                reply_markup=main_menu
            )
            
            logger.info(f"QR code generated for user {query.from_user.id}: {amount} Kƒç, {service_name}")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data.clear()
            
        except Exception as e:
            logger.error(f"Error generating QR code: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.",
                parse_mode=ParseMode.HTML
            )
        
        return ConversationHandler.END

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = update.message.text
    
    if text == "üí≥ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂":
        return await start(update, context)
    
    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        info_text = """
üå∏ <b>–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã No√©me</b> üå∏

üéØ <b>–ù–∞—à–∏ —É—Å–ª—É–≥–∏:</b>
üåø –£—Ö–æ–¥ –∑–∞ –±—Ä–æ–≤—è–º–∏ (–∫–æ—Ä—Ä–µ–∫—Ü–∏—è, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ, –ª–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
üëÅÔ∏è –£—Ö–æ–¥ –∑–∞ —Ä–µ—Å–Ω–∏—Ü–∞–º–∏ (–ª–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ, –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ)
‚ú® –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
üëÑ –ú–∞–∫–∏—è–∂ –∏ –ø—Ä–∏—á–µ—Å–∫–∏

üí≥ <b>–û–ø–ª–∞—Ç–∞:</b>
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ —á–µ—à—Å–∫–∏–µ –±–∞–Ω–∫–∏ —Å QR-–ø–ª–∞—Ç–µ–∂–∞–º–∏
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

üè™ <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b>
–ü–Ω-–ü—Ç: 9:00-19:00
–°–±: 9:00-17:00
–í—Å: –ø–æ –∑–∞–ø–∏—Å–∏
"""
        await update.message.reply_text(info_text, parse_mode=ParseMode.HTML)
    
    elif text == "üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        contact_text = f"""
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–∞–ª–æ–Ω–∞ No√©me</b>

üë©‚Äçüíº <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {OWNER_NAME}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +420 XXX XXX XXX
üìß <b>Email:</b> info@noeme.cz
üåê <b>–°–∞–π—Ç:</b> www.noeme.cz

üìç <b>–ê–¥—Ä–µ—Å:</b>
–ê–¥—Ä–µ—Å —Å–∞–ª–æ–Ω–∞
Praha, Czech Republic

üìÖ <b>–ó–∞–ø–∏—Å—å:</b>
–û–Ω–ª–∞–π–Ω –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
"""
        await update.message.reply_text(contact_text, parse_mode=ParseMode.HTML)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.",
        parse_mode=ParseMode.HTML
    )
    context.user_data.clear()
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –ù–∞–∂–º–∏—Ç–µ /start
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã
3. –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É
4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ
5. –ü–æ–ª—É—á–∏—Ç–µ QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∞–ª–æ–Ω–∞.
"""
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not found in environment variables")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            MessageHandler(filters.Regex("üí≥ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"), start)
        ],
        states={
            SELECTING_AMOUNT: [
                CallbackQueryHandler(handle_amount_selection, pattern="^amount_"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_amount)
            ],
            SELECTING_SERVICE: [
                CallbackQueryHandler(handle_service_selection, pattern="^(service_|back_to_)")
            ],
            CONFIRMING_PAYMENT: [
                CallbackQueryHandler(handle_payment_confirmation, pattern="^(confirm_|cancel_|back_to_)")
            ]
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CommandHandler('start', start)
        ],
        persistent=True,
        name='payment_conversation'
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(MessageHandler(filters.Regex("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è|üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã"), handle_main_menu))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Starting Enhanced QR Payment Bot...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
