#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã
–†–∞–±–æ—Ç–∞–µ—Ç —Å —á–µ—à—Å–∫–∏–º–∏ –±–∞–Ω–∫–∞–º–∏ (Air Bank, Raiffeisenbank CZ)
"""

import os
import logging
import asyncio
import time
import qrcode
from io import BytesIO
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    from database import db
    DB_ENABLED = True
    logger.info("‚úÖ Database module loaded successfully")
except ImportError:
    DB_ENABLED = False
    logger.warning("‚ö†Ô∏è Database module not found, using in-memory stats")

# –ò–º–ø–æ—Ä—Ç keep-alive –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ Render
try:
    from render_keep_alive import setup_render_keep_alive, render_keep_alive
except ImportError:
    logger.warning("render_keep_alive module not found, keep-alive disabled")
    setup_render_keep_alive = None
    render_keep_alive = None

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_TELEGRAM_ID = os.getenv('ADMIN_TELEGRAM_ID')
OWNER_NAME = os.getenv('OWNER_NAME', 'ULIANA EMELINA')
ACCOUNT_NUMBER = os.getenv('ACCOUNT_NUMBER', '3247217010/3030')
IBAN = os.getenv('IBAN', 'CZ3230300000003247217010')

# –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
ADMIN_IDS = set()
if ADMIN_TELEGRAM_ID:
    for admin_id in ADMIN_TELEGRAM_ID.split(','):
        admin_id = admin_id.strip()
        if admin_id:
            ADMIN_IDS.add(admin_id)
    logger.info(f"‚úÖ Loaded {len(ADMIN_IDS)} admin(s)")

def check_is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return str(user_id) in ADMIN_IDS

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (fallback –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)
user_stats = {}  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ DB_ENABLED = False

# –£—Å–ª—É–≥–∏ —Å–∞–ª–æ–Ω–∞ - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏
SERVICES_ALL = {
    # –£—Å–ª—É–≥–∏ –¥–ª—è –±—Ä–æ–≤–µ–π (üåø)
    'uprava_barveni': 'üåø √öPRAVA A BARVEN√ç',
    'uprava': 'üåø √öPRAVA',
    'zesvetleni_uprava_tonovani': 'üåø ZESVƒöTLEN√ç S √öPRAVOU A TONOV√ÅN√çM',
    'laminace_uprava_tonovani': 'üåø LAMINACE S √öPRAVOU A TONOV√ÅN√çM',
    
    # –£—Å–ª—É–≥–∏ –¥–ª—è —Ä–µ—Å–Ω–∏—Ü (üëÅÔ∏è –∏ ‚ú®)
    'laminace_ras': 'üëÅÔ∏è LAMINACE ≈òAS',
    'barveni_ras': 'üëÅÔ∏è BARVEN√ç ≈òAS',
    'laminace_ras_uprava_barveni': '‚ú® LAMINACE ≈òAS + √öPRAVA A BARVEN√ç OBOƒå√ç',
    'laminace_ras_zesvetleni': '‚ú® LAMINACE ≈òAS + ZESVƒöTLEN√ç OBOƒå√ç S T√ìNOV√ÅN√çM',
    'laminace_oboci_ras': '‚ú® LAMINACE OBOƒå√ç A ≈òAS',
    'depilace_obliceje': 'üåø DEPILACE OBLIƒåEJE',
    # –ö—Ä–∞—Å–æ—Ç–∞ –∏ —Å—Ç–∏–ª—å (üíÑ)
    'liceni_uces': 'üëÑ L√çƒåEN√ç & √öƒåES',
    'liceni': 'üëÑ L√çƒåEN√ç',
    'uces': 'üëÑ √öƒåES',
}

# –£—Å–ª—É–≥–∏ –¥–ª—è —Å—É–º–º –¥–æ 1000 CZK –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
SERVICES_LOW_PRICE = {
    'uprava_barveni': 'üåø √öPRAVA A BARVEN√ç',
    'uprava': 'üåø √öPRAVA', 
    'zesvetleni_uprava_tonovani': 'üåø ZESVƒöTLEN√ç S √öPRAVOU A TONOV√ÅN√çM',
    'laminace_uprava_tonovani': 'üåø LAMINACE S √öPRAVOU A TONOV√ÅN√çM',
    'laminace_ras': 'üëÅÔ∏è LAMINACE ≈òAS',
    'barveni_ras': 'üëÅÔ∏è BARVEN√ç ≈òAS',
    'depilace_obliceje': 'üåø DEPILACE OBLIƒåEJE',
    'uces': 'üëÑ √öƒåES',
}

# –£—Å–ª—É–≥–∏ –¥–ª—è —Å—É–º–º –æ—Ç 1001 CZK
SERVICES_HIGH_PRICE = {
    'laminace_ras_uprava_barveni': '‚ú® LAMINACE ≈òAS + √öPRAVA A BARVEN√ç OBOƒå√ç',
    'laminace_ras_zesvetleni': '‚ú® LAMINACE ≈òAS + ZESVƒöTLEN√ç OBOƒå√ç S T√ìNOV√ÅN√çM',
    'laminace_oboci_ras': '‚ú® LAMINACE OBOƒå√ç A ≈òAS',
    'liceni_uces': 'üëÑ L√çƒåEN√ç & √öƒåES',
    'liceni': 'üëÑ L√çƒåEN√ç',
}

def get_services_for_amount(amount: float) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º—ã"""
    if amount <= 1000:
        return SERVICES_LOW_PRICE
    else:
        return SERVICES_HIGH_PRICE

def get_main_keyboard(show_admin: bool = False):
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [KeyboardButton('üí∞ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã')],
        [KeyboardButton('‚ÑπÔ∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å—á–µ—Ç–∞'), KeyboardButton('‚ùì –ü–æ–º–æ—â—å')]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if show_admin:
        keyboard.append([KeyboardButton('üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')])
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

def get_admin_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'), KeyboardButton('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î')],
        [KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é'), KeyboardButton('üì¶ –ë—ç–∫–∞–ø')],
        [KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

def get_services_keyboard(amount: float = None):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —É—Å–ª—É–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º—ã"""
    if amount is None:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –µ—Å–ª–∏ —Å—É–º–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        services = SERVICES_ALL
    else:
        # –í—ã–±–∏—Ä–∞–µ–º —É—Å–ª—É–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º—ã
        services = get_services_for_amount(amount)
    
    keyboard = []
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–∞–∂–¥—É—é —É—Å–ª—É–≥—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    for service_key, service_name in services.items():
        keyboard.append([InlineKeyboardButton(service_name, callback_data=f"service_{service_key}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å —É—Å–ª—É–≥—É —Å–∞–º–æ–º—É"
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —É—Å–ª—É–≥—É —Å–∞–º–æ–º—É", callback_data="service_custom")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏"
    keyboard.append([InlineKeyboardButton("‚ùå –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏", callback_data="service_none")])
    
    return InlineKeyboardMarkup(keyboard)

def get_amount_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º –≤—ã–±–æ—Ä–æ–º —Å—É–º–º—ã"""
    keyboard = []
    amounts = range(500, 1900, 100)  # –æ—Ç 500 –¥–æ 1800 —Å —à–∞–≥–æ–º 100
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    row = []
    for amount in amounts:
        row.append(InlineKeyboardButton(f"{amount} CZK", callback_data=f"amount_{amount}"))
        if len(row) == 3:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if row:
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Å—É–º–º—ã
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É", callback_data="amount_custom")])
    
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞
    is_admin = check_is_admin(user_id)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏–ª–∏ fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if DB_ENABLED:
        try:
            db.add_or_update_user(
                user_id=user_id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                is_admin=is_admin
            )
            db.add_event(user_id, 'start')
        except Exception as e:
            logger.error(f"Database error: {e}")
    else:
        user_stats[user_id] = user_stats.get(user_id, 0) + 1
    
    await update.message.reply_text(
        'üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ–ø–ª–∞—Ç—ã —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã No√©me!\n\n'
        'üí∞ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥.\n\n'
        'üì± –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n'
        '‚Ä¢ –ö–ª–∏–µ–Ω—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç QR-–∫–æ–¥ —Å–≤–æ–∏–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º\n'
        '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n'
        '‚Ä¢ –û—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂\n\n'
        'üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:',
        reply_markup=get_main_keyboard(is_admin)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = str(update.effective_user.id)
    is_admin = check_is_admin(int(user_id))
    
    help_text = (
        'üìã <b>–ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –°–û–¢–†–£–î–ù–ò–ö–ê</b>\n\n'
        '<b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥:</b>\n'
        '1Ô∏è‚É£ –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥\n'
        '2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí∞ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã"\n'
        '3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –∫—Ä–æ–Ω–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1400)\n'
        '4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞\n'
        '5Ô∏è‚É£ –ü–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ –∫–ª–∏–µ–Ω—Ç—É\n'
        '6Ô∏è‚É£ –ö–ª–∏–µ–Ω—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–¥ –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n\n'
        'üí° QR-–∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!'
    )
    
    if is_admin:
        help_text += (
            '\n\nüîß <b>–ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–î–ú–ò–ù–ê:</b>\n\n'
            'üìä <b>/stats</b> - –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n'
            '   ‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è\n'
            '   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º (—Ç–µ–∫—É—â–∏–π –∏ –ø—Ä–æ—à–ª—ã–π)\n'
            '   ‚Ä¢ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'
            '   ‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏\n\n'
            '‚ûï <b>/addtx</b> - –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—Ä—É—á–Ω—É—é\n'
            '   –§–æ—Ä–º–∞—Ç: /addtx &lt;—Å—É–º–º–∞&gt; &lt;username&gt; &lt;—É—Å–ª—É–≥–∞&gt;\n'
            '   –ü—Ä–∏–º–µ—Ä: /addtx 1400 makkenddyy LAMINACE ≈òAS\n'
            '   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞!\n\n'
            'üì¶ <b>/backup</b> - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON\n'
            '   –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'
            '   –≤ —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏\n\n'
            'üîç <b>/dbcheck</b> - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n'
            '   –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL,\n'
            '   –≤–µ—Ä—Å–∏—é psycopg2, —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –ë–î\n\n'
            'üîß <b>–ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:</b>\n'
            '   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" –¥–ª—è\n'
            '   –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º'
        )
    
    await update.message.reply_text(
        help_text,
        parse_mode='HTML',
        reply_markup=get_main_keyboard(is_admin)
    )

async def myid_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π Telegram ID"""
    user = update.effective_user
    await update.message.reply_text(
        f'üë§ <b>–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n'
        f'üÜî Telegram ID: <code>{user.id}</code>\n'
        f'üë§ Username: @{user.username or "–Ω–µ—Ç"}\n'
        f'üìù –ò–º—è: {user.first_name or ""} {user.last_name or ""}\n\n'
        f'<i>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤</i>',
        parse_mode='HTML'
    )

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = str(update.effective_user.id)
    
    if not check_is_admin(int(user_id)):
        await update.message.reply_text('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.')
        return
    
    await update.message.reply_text(
        'üîß <b>–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨</b>\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:',
        parse_mode='HTML',
        reply_markup=get_admin_keyboard()
    )

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info"""
    await update.message.reply_text(
        f'üìã **–†–ï–ö–í–ò–ó–ò–¢–´ –°–ß–ï–¢–ê –°–ê–õ–û–ù–ê**\n\n'
        f'üë§ **–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** {OWNER_NAME}\n'
        f'üè¶ **–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞:** {ACCOUNT_NUMBER}\n'
        f'üåç **IBAN:** {IBAN}\n'
        f'üí± **–í–∞–ª—é—Ç–∞:** CZK (—á–µ—à—Å–∫–∏–µ –∫—Ä–æ–Ω—ã)\n\n'
        f'üí∞ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

async def payment_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    user = update.effective_user
    user_id = user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ –ë–î
    if DB_ENABLED:
        try:
            db.add_or_update_user(user_id, user.username, user.first_name, user.last_name)
            db.add_event(user_id, 'payment_start')
        except Exception as e:
            logger.error(f"Database error: {e}")
    else:
        user_stats[user_id] = user_stats.get(user_id, 0) + 1
    
    await update.message.reply_text(
        'üåø <b>–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã</b>\n\n'
        '<b>–®–∞–≥–∏:</b>\n'
        '1Ô∏è‚É£ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—É–º–º—É –∑–∞ —É—Å–ª—É–≥—É –≤ <b>Fresha Partner</b>\n'
        '2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é\n'
        '3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É\n'
        '4Ô∏è‚É£ –ü–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ –∫–ª–∏–µ–Ω—Ç—É\n\n'
        'üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:</b>',
        reply_markup=get_amount_keyboard(),
        parse_mode='HTML'
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã
    context.user_data['waiting_for_amount'] = True

def generate_qr_code(amount: float, service_msg: str = None) -> BytesIO:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    # –¢–æ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Air Bank —Å —É—Å–ª—É–≥–æ–π
    # –§–æ—Ä–º–∞—Ç: SPD*1.0*ACC:CZ3230300000003247217010*RN:ULIANA EMELINA*AM:500*CC:CZK*MSG:ZESVETLENI OBOCI
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ, –∏–Ω–∞—á–µ —Å –∑–∞–ø—è—Ç–æ–π
    if amount == int(amount):
        formatted_amount = str(int(amount))
    else:
        formatted_amount = f"{amount:.2f}".replace('.', ',')
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π QR —Ç–µ–∫—Å—Ç
    qr_text = f"SPD*1.0*ACC:{IBAN}*RN:{OWNER_NAME.upper()}*AM:{formatted_amount}*CC:CZK"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if service_msg:
        qr_text += f"*MSG:{service_msg}"
    
    # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(qr_text)
    qr.make(fit=True)
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = qr.make_image(fill_color="black", back_color="white")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
    bio = BytesIO()
    img.save(bio, 'PNG')
    bio.seek(0)
    
    return bio

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏ –∏ —Å—É–º–º—ã)"""
    text = update.message.text
    user_id = str(update.effective_user.id)
    is_admin = check_is_admin(int(user_id))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if text == 'üí∞ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã':
        await payment_command(update, context)
        return
    elif text == '‚ÑπÔ∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å—á–µ—Ç–∞':
        await info_command(update, context)
        return
    elif text == '‚ùì –ü–æ–º–æ—â—å':
        await help_command(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    elif text == 'üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å' and check_is_admin(int(user_id)):
        await admin_command(update, context)
        return
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' and check_is_admin(int(user_id)):
        await stats_command(update, context)
        return
    elif text == 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î' and check_is_admin(int(user_id)):
        await dbcheck_command(update, context)
        return
    elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é' and check_is_admin(int(user_id)):
        await update.message.reply_text(
            '‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b>\n\n'
            '–§–æ—Ä–º–∞—Ç: /addtx &lt;—Å—É–º–º–∞&gt; &lt;username&gt; &lt;—É—Å–ª—É–≥–∞&gt;\n\n'
            '<b>–ü—Ä–∏–º–µ—Ä:</b>\n'
            '/addtx 1400 makkenddyy LAMINACE ≈òAS\n\n'
            '<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞!</i>',
            parse_mode='HTML',
            reply_markup=get_admin_keyboard()
        )
        return
    elif text == 'üì¶ –ë—ç–∫–∞–ø' and check_is_admin(int(user_id)):
        await backup_command(update, context)
        return
    elif text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await update.message.reply_text(
            'üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=get_main_keyboard(is_admin)
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    if context.user_data.get('waiting_for_amount'):
        await handle_amount(update, context)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —É—Å–ª—É–≥–∏
    elif context.user_data.get('waiting_for_custom_service'):
        await handle_custom_service(update, context)
    else:
        await update.message.reply_text(
            '‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n'
            'üí∞ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ - –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞\n'
            '‚ÑπÔ∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å—á–µ—Ç–∞ - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤\n'
            '‚ùì –ü–æ–º–æ—â—å - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π',
            reply_markup=get_main_keyboard(is_admin)
        )

async def handle_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
    try:
        # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
        amount_text = update.message.text.strip().replace(',', '.')
        amount = float(amount_text)
        
        if amount <= 0:
            await update.message.reply_text(
                '‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!\n'
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
            )
            return
        
        if amount > 1000000:
            await update.message.reply_text(
                '‚ùå –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è!\n'
                '–ú–∞–∫—Å–∏–º—É–º: 1,000,000 CZK'
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['amount'] = amount
        context.user_data['waiting_for_amount'] = False
        context.user_data['waiting_for_service'] = True
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_amount = f"{amount:,.2f}".replace(',', ' ').replace('.', ',')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—Å–ª—É–≥ —Å —É—á–µ—Ç–æ–º —Å—É–º–º—ã
        await update.message.reply_text(
            f'üí∞ –°—É–º–º–∞: {formatted_amount} CZK\n\n'
            'üåø –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤ –ø–ª–∞—Ç–µ–∂–µ:\n'
            'üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É',
            reply_markup=get_services_keyboard(amount)
        )
        
        logger.info(f"Amount {amount} CZK saved, waiting for service selection, user: {update.effective_user.id}")
        
    except ValueError:
        await update.message.reply_text(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!\n\n'
            'üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n'
            '‚Ä¢ –¶–µ–ª—ã–µ —á–∏—Å–ª–∞: 500, 1000\n'
            '‚Ä¢ –î–µ—Å—è—Ç–∏—á–Ω—ã–µ: 500.50, 1000.25\n\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
        )

async def handle_custom_service(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —É—Å–ª—É–≥–∏"""
    service_text = update.message.text.strip()
    
    if len(service_text) < 2:
        await update.message.reply_text(
            '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
        )
        return
    
    if len(service_text) > 50:
        await update.message.reply_text(
            '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n'
            '–ú–∞–∫—Å–∏–º—É–º: 50 —Å–∏–º–≤–æ–ª–æ–≤\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    amount = context.user_data.get('amount')
    if not amount:
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        return
    
    # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
    service_msg = service_text.upper().strip()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —É—Å–ª—É–≥–æ–π
    qr_image = generate_qr_code(amount, service_msg)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatted_amount = f"{amount:,.2f}".replace(',', ' ').replace('.', ',')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
    await context.bot.send_photo(
        chat_id=update.message.chat_id,
        photo=qr_image,
        caption=f'üåø QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥ —Å–∞–ª–æ–Ω–∞\n\n'
               f'üí∞ –°—É–º–º–∞: {formatted_amount} CZK\n'
               f'üõçÔ∏è –£—Å–ª—É–≥–∞: {service_msg}\n'
               f'üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {OWNER_NAME}\n'
               f'üè¶ –°—á–µ—Ç: {ACCOUNT_NUMBER}\n\n'
               f'üì± –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –∫–ª–∏–µ–Ω—Ç—É\n'
               f'‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–¥ –≤ —Å–≤–æ–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º',
        reply_markup=get_main_keyboard()
    )
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î
    if DB_ENABLED:
        try:
            db.add_transaction(
                user_id=update.effective_user.id,
                amount=amount,
                service=service_msg
            )
            db.add_event(update.effective_user.id, 'qr_generated', f'amount:{amount},service:{service_msg}')
        except Exception as e:
            logger.error(f"Database error when saving transaction: {e}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data['waiting_for_service'] = False
    context.user_data['waiting_for_custom_service'] = False
    context.user_data['amount'] = None
    
    logger.info(f"QR code generated for amount: {amount} CZK, custom service: {service_msg}, user: {update.effective_user.id}")

async def handle_amount_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if not context.user_data.get('waiting_for_amount'):
        await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Å—É–º–º—ã.')
        return
    
    if query.data == 'amount_custom':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É
        await query.edit_message_text(
            '‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É</b>\n\n'
            'üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n'
            '‚Ä¢ –¶–µ–ª—ã–µ —á–∏—Å–ª–∞: 500, 1000\n'
            '‚Ä¢ –î–µ—Å—è—Ç–∏—á–Ω—ã–µ: 500.50, 1000.25\n\n'
            'üëá –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:',
            parse_mode='HTML'
        )
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è waiting_for_amount=True –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ callback_data
    amount_str = query.data.replace('amount_', '')
    try:
        amount = float(amount_str)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['amount'] = amount
        context.user_data['waiting_for_amount'] = False
        context.user_data['waiting_for_service'] = True
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_amount = f"{amount:,.2f}".replace(',', ' ').replace('.', ',')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—Å–ª—É–≥ —Å —É—á–µ—Ç–æ–º —Å—É–º–º—ã
        await query.edit_message_text(
            f'üí∞ –°—É–º–º–∞: {formatted_amount} CZK\n\n'
            'üåø –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤ –ø–ª–∞—Ç–µ–∂–µ:\n'
            'üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É',
            reply_markup=get_services_keyboard(amount)
        )
        
        logger.info(f"Amount {amount} CZK selected via button, waiting for service selection, user: {update.effective_user.id}")
        
    except ValueError:
        await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.')

async def handle_service_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
    query = update.callback_query
    await query.answer()
    
    if not context.user_data.get('waiting_for_service'):
        await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É.')
        return
    
    amount = context.user_data.get('amount')
    if not amount:
        await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É
    service_key = query.data.replace('service_', '')
    
    if service_key == 'none':
        service_name = None
        service_msg = None
        caption_service = ''
    elif service_key == 'custom':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é —É—Å–ª—É–≥—É
        await query.edit_message_text(
            '‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏</b>\n\n'
            'üìù –ù–∞–ø—Ä–∏–º–µ—Ä:\n'
            '‚Ä¢ √öPRAVA OBOƒå√ç\n'
            '‚Ä¢ BARVEN√ç ≈òAS\n'
            '‚Ä¢ KOMBINACE SLU≈ΩEB\n\n'
            'üëá –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:',
            parse_mode='HTML'
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏
        context.user_data['waiting_for_custom_service'] = True
        return
    else:
        # –ò—â–µ–º —É—Å–ª—É–≥—É –≤–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö
        service_name = SERVICES_ALL.get(service_key)
        if service_name:
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è QR-–∫–æ–¥–∞
            service_msg = service_name.split(' ', 1)[1] if ' ' in service_name else service_name
            caption_service = f'üõçÔ∏è –£—Å–ª—É–≥–∞: {service_msg}\n'
        else:
            service_name = None
            service_msg = None
            caption_service = ''
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ —Å —É—Å–ª—É–≥–æ–π
    qr_image = generate_qr_code(amount, service_msg)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatted_amount = f"{amount:,.2f}".replace(',', ' ').replace('.', ',')
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
    await query.delete_message()
    await context.bot.send_photo(
        chat_id=query.message.chat_id,
        photo=qr_image,
        caption=f'üåø QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥ —Å–∞–ª–æ–Ω–∞\n\n'
               f'üí∞ –°—É–º–º–∞: {formatted_amount} CZK\n'
               f'{caption_service}'
               f'üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {OWNER_NAME}\n'
               f'üè¶ –°—á–µ—Ç: {ACCOUNT_NUMBER}\n\n'
               f'üì± –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –∫–ª–∏–µ–Ω—Ç—É\n'
               f'‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–¥ –≤ —Å–≤–æ–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
        reply_markup=get_main_keyboard()
    )
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î
    if DB_ENABLED:
        try:
            db.add_transaction(
                user_id=update.effective_user.id,
                amount=amount,
                service=service_msg if service_msg else None
            )
            db.add_event(update.effective_user.id, 'qr_generated', f'amount:{amount},service:{service_msg}')
        except Exception as e:
            logger.error(f"Database error when saving transaction: {e}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data['waiting_for_service'] = False
    context.user_data['amount'] = None
    
    service_log = service_name if service_name else "without service"
    logger.info(f"QR code generated for amount: {amount} CZK, service: {service_log}, user: {update.effective_user.id}")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = str(update.effective_user.id)
    
    if not check_is_admin(int(user_id)):
        await update.message.reply_text('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')
        return
    
    if DB_ENABLED:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            total_stats = db.get_total_stats()
            all_users = db.get_all_users_stats()
            popular_services = db.get_popular_services(5)
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            current_month = db.get_monthly_stats(0)  # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            prev_month = db.get_monthly_stats(1)     # –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_icon = "üêò" if db.db_type == 'postgresql' else "üìù"
            db_name = "PostgreSQL" if db.db_type == 'postgresql' else "SQLite"
            
            # –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
            month_names = ['', '—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å', 
                          '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
            
            stats_text = f'üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**\n'
            stats_text += f'{db_icon} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: **{db_name}**\n\n'
            
            stats_text += f'**üìÖ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:**\n'
            stats_text += f'üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_stats["total_users"]}\n'
            stats_text += f'üí∞ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_stats["total_transactions"]}\n'
            stats_text += f'üíµ –û–±—â–∞—è —Å—É–º–º–∞: {total_stats["total_amount"]:,.0f} CZK\n'
            stats_text += f'üìä –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞: {total_stats["avg_amount"]:.0f} CZK\n'
            stats_text += f'üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {total_stats["active_24h"]}\n\n'
            
            # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            if current_month['transactions'] > 0:
                curr_month_name = month_names[current_month['month']]
                stats_text += f'**üìÖ {curr_month_name.capitalize()} {current_month["year"]}:**\n'
                stats_text += f'üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {current_month["transactions"]}\n'
                stats_text += f'üíµ –°—É–º–º–∞: {current_month["total_amount"]:,.0f} CZK\n'
                stats_text += f'üìä –°—Ä–µ–¥–Ω—è—è: {current_month["avg_amount"]:.0f} CZK\n'
                stats_text += f'üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {current_month["unique_users"]}\n\n'
            
            # –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
            if prev_month['transactions'] > 0:
                prev_month_name = month_names[prev_month['month']]
                stats_text += f'**üìÖ {prev_month_name.capitalize()} {prev_month["year"]}:**\n'
                stats_text += f'üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {prev_month["transactions"]}\n'
                stats_text += f'üíµ –°—É–º–º–∞: {prev_month["total_amount"]:,.0f} CZK\n'
                stats_text += f'üìä –°—Ä–µ–¥–Ω—è—è: {prev_month["avg_amount"]:.0f} CZK\n'
                stats_text += f'üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {prev_month["unique_users"]}\n\n'
            
            if all_users:
                stats_text += '**–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n'
                for i, user in enumerate(all_users[:5], 1):
                    username = user['username'] or f"ID{user['user_id']}"
                    stats_text += f'{i}. @{username}: {user["transactions_count"]} QR, {user["total_amount"]:.0f} CZK\n'
            
            if popular_services:
                stats_text += '\n**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏:**\n'
                for i, (service, count) in enumerate(popular_services, 1):
                    stats_text += f'{i}. {service}: {count}x\n'
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∏—Ö –º–µ—Å—è—Ü–µ–≤
            keyboard = []
            keyboard.append([
                InlineKeyboardButton("üìÖ –î—Ä—É–≥–æ–π –º–µ—Å—è—Ü", callback_data="stats_select_month")
            ])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(stats_text, parse_mode='Markdown', reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"Database error in stats: {e}")
            await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î: {e}')
    else:
        # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ø–∞–º—è—Ç–∏
        total_users = len(user_stats)
        total_requests = sum(user_stats.values())
        
        stats_text = f'üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê (–ø–∞–º—è—Ç—å)**\n\n'
        stats_text += f'üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n'
        stats_text += f'üì± –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n\n'
        
        if user_stats:
            stats_text += '**–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n'
            sorted_users = sorted(user_stats.items(), key=lambda x: x[1], reverse=True)
            for i, (uid, count) in enumerate(sorted_users[:5], 1):
                stats_text += f'{i}. User {uid}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤\n'
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')

async def handle_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    if not check_is_admin(int(user_id)):
        await query.edit_message_text('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')
        return
    
    if query.data == "stats_select_month":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 12 –º–µ—Å—è—Ü–µ–≤
        from datetime import datetime, timedelta
        
        keyboard = []
        month_names = ['', '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                      '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 12 –º–µ—Å—è—Ü–µ–≤
        row = []
        for offset in range(12):
            target_date = datetime.now() - timedelta(days=30 * offset)
            month_name = month_names[target_date.month]
            year = target_date.year
            
            button_text = f"{month_name} {year}"
            row.append(InlineKeyboardButton(button_text, callback_data=f"stats_month_{offset}"))
            
            if len(row) == 2:
                keyboard.append(row)
                row = []
        
        if row:
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="stats_back")])
        
        await query.edit_message_text(
            'üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:</b>',
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif query.data.startswith("stats_month_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
        offset = int(query.data.split('_')[2])
        
        if DB_ENABLED:
            try:
                from datetime import datetime, timedelta
                month_stats = db.get_monthly_stats(offset)
                
                month_names = ['', '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                              '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
                
                month_name = month_names[month_stats['month']]
                
                stats_text = f'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {month_name} {month_stats["year"]}</b>\n\n'
                
                if month_stats['transactions'] > 0:
                    stats_text += f'üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {month_stats["transactions"]}\n'
                    stats_text += f'üíµ –û–±—â–∞—è —Å—É–º–º–∞: {month_stats["total_amount"]:,.0f} CZK\n'
                    stats_text += f'üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {month_stats["avg_amount"]:.0f} CZK\n'
                    stats_text += f'üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {month_stats["unique_users"]}\n'
                else:
                    stats_text += 'üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥'
                
                keyboard = [[InlineKeyboardButton("üìÖ –î—Ä—É–≥–æ–π –º–µ—Å—è—Ü", callback_data="stats_select_month")]]
                
                await query.edit_message_text(
                    stats_text,
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as e:
                logger.error(f"Error getting month stats: {e}")
                await query.edit_message_text(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    elif query.data == "stats_back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        await query.delete_message()

async def addtx_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—Ä—É—á–Ω—É—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    –§–æ—Ä–º–∞—Ç: /addtx <—Å—É–º–º–∞> <username> <—É—Å–ª—É–≥–∞>
    –ü—Ä–∏–º–µ—Ä: /addtx 1400 @makkenddyy √öPRAVA A BARVEN√ç
    """
    user_id = str(update.effective_user.id)
    
    if not check_is_admin(int(user_id)):
        await update.message.reply_text('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')
        return
    
    if not DB_ENABLED:
        await update.message.reply_text('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.')
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    try:
        args = update.message.text.split(maxsplit=3)
        if len(args) < 3:
            await update.message.reply_text(
                '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n'
                '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n'
                '/addtx <—Å—É–º–º–∞> <username> [—É—Å–ª—É–≥–∞]\n\n'
                '–ü—Ä–∏–º–µ—Ä—ã:\n'
                '/addtx 1400 @makkenddyy LAMINACE ≈òAS\n'
                '/addtx 500 @user123\n'
            )
            return
        
        amount = float(args[1])
        username_arg = args[2].lstrip('@')
        service = args[3] if len(args) > 3 else None
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        all_users = db.get_all_users_stats()
        target_user = None
        for user in all_users:
            if user['username'] == username_arg:
                target_user = user
                break
        
        if not target_user:
            await update.message.reply_text(
                f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_arg} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.\n\n'
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (/start).'
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        db.add_transaction(target_user['user_id'], amount, service)
        
        await update.message.reply_text(
            f'‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n'
            f'üí∞ –°—É–º–º–∞: {amount:,.0f} CZK\n'
            f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username_arg}\n'
            f'üõçÔ∏è –£—Å–ª—É–≥–∞: {service or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}'
        )
        
    except ValueError:
        await update.message.reply_text('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.')
    except Exception as e:
        logger.error(f"Error adding transaction: {e}")
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞: {e}')

async def backup_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –≤ JSON (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = str(update.effective_user.id)
    
    if not check_is_admin(int(user_id)):
        await update.message.reply_text('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')
        return
    
    if not DB_ENABLED:
        await update.message.reply_text('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.')
        return
    
    try:
        import json
        from datetime import datetime
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_users = db.get_all_users_stats()
        recent_transactions = db.get_recent_transactions(100)  # –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        
        backup_data = {
            'backup_date': datetime.now().isoformat(),
            'db_type': db.db_type,
            'users': all_users,
            'transactions': recent_transactions
        }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
        json_data = json.dumps(backup_data, indent=2, ensure_ascii=False, default=str)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
        from io import BytesIO
        backup_file = BytesIO(json_data.encode('utf-8'))
        backup_file.name = f'backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        
        await update.message.reply_document(
            document=backup_file,
            caption=f'üì¶ –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n\n'
                   f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\n'
                   f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(recent_transactions)}\n'
                   f'–î–∞—Ç–∞: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'
        )
        
    except Exception as e:
        logger.error(f"Backup error: {e}")
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}')

async def dbcheck_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = str(update.effective_user.id)
    
    if not check_is_admin(int(user_id)):
        await update.message.reply_text('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')
        return
    
    check_text = 'üîç <b>–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•</b>\n\n'
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DATABASE_URL
    database_url = os.getenv('DATABASE_URL')
    if database_url:
        # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
        if '@' in database_url:
            parts = database_url.split('@')
            user_part = parts[0].split('://')[0] + '://' + parts[0].split('://')[1].split(':')[0] + ':***'
            masked_url = user_part + '@' + parts[1]
        else:
            masked_url = database_url
        check_text += f'üìã DATABASE_URL: <code>{masked_url}</code>\n\n'
    else:
        check_text += '‚ùå DATABASE_URL: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n'
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ psycopg2
    try:
        import psycopg2
        check_text += '‚úÖ psycopg2: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n'
        check_text += f'   –í–µ—Ä—Å–∏—è: {psycopg2.__version__}\n\n'
    except ImportError:
        check_text += '‚ùå psycopg2: –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n'
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ë–î
    if DB_ENABLED:
        from database import db
        check_text += f'üìä –¢–∏–ø –ë–î: <b>{db.db_type.upper()}</b>\n'
        
        if db.db_type == 'postgresql':
            check_text += 'üêò PostgreSQL –∞–∫—Ç–∏–≤–µ–Ω\n'
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                with db.get_connection() as conn:
                    check_text += '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: —É—Å–ø–µ—à–Ω–æ\n'
            except Exception as e:
                check_text += f'‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞\n'
                check_text += f'   {str(e)[:100]}\n'
        else:
            check_text += 'üìù SQLite –∞–∫—Ç–∏–≤–µ–Ω (fallback)\n'
            if database_url and database_url.startswith('postgres'):
                check_text += '\n‚ö†Ô∏è <b>–ü–†–û–ë–õ–ï–ú–ê:</b>\n'
                check_text += 'DATABASE_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite!\n'
                check_text += '–í–æ–∑–º–æ–∂–Ω–æ psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n'
    else:
        check_text += '‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n'
    
    await update.message.reply_text(check_text, parse_mode='HTML')

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º Context7"""
    logger.error(f"Exception while handling an update: {context.error}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if update and update.effective_user:
        context.user_data.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ update –¥–æ—Å—Ç—É–ø–µ–Ω
    if update and update.effective_message:
        try:
            await update.effective_message.reply_text(
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.',
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            logger.error(f"Failed to send error message: {e}")

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    await update.message.reply_text(
        '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!\n\n'
        'üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:',
        reply_markup=get_main_keyboard()
    )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not found in environment variables!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –Ω–∞ Render —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º
    lock_file = '/tmp/qr_bot.lock' if os.getenv('RENDER') else None
    
    if lock_file:
        try:
            if os.path.exists(lock_file):
                # –ß–∏—Ç–∞–µ–º PID —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                with open(lock_file, 'r') as f:
                    old_pid = f.read().strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç lock —Ñ–∞–π–ª–∞
                import time
                lock_age = time.time() - os.path.getmtime(lock_file)
                
                if lock_age > 180:  # 3 –º–∏–Ω—É—Ç—ã (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ)
                    logger.warning(f"‚ö†Ô∏è Removing stale lock file (>3 minutes old, PID: {old_pid})")
                    os.remove(lock_file)
                else:
                    logger.error(f"‚ùå Another bot instance is running (PID: {old_pid}, age: {lock_age:.0f}s)")
                    logger.info("üîÑ Waiting for old instance to shutdown gracefully...")
                    
                    # –î–∞–µ–º —Å—Ç–∞—Ä–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ graceful shutdown
                    import time
                    for i in range(30):
                        time.sleep(1)
                        if not os.path.exists(lock_file):
                            logger.info("‚úÖ Old instance shutdown detected")
                            break
                        if i == 29:
                            logger.warning("‚ö†Ô∏è Force removing lock file after 30s wait")
                            os.remove(lock_file)
            
            # –°–æ–∑–¥–∞–µ–º lock —Ñ–∞–π–ª —Å —Ç–µ–∫—É—â–∏–º PID
            with open(lock_file, 'w') as f:
                f.write(str(os.getpid()))
            logger.info(f"üîí Lock file created with PID: {os.getpid()}")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Could not manage lock file: {e}")
    
    logger.info("Starting QR Payment Bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è keep-alive –∑–∞–¥–∞—á–∏
    keep_alive_task = None
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ë–ï–ó post_init callback
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("myid", myid_command))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("info", info_command))
    application.add_handler(CommandHandler("payment", payment_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("backup", backup_command))
    application.add_handler(CommandHandler("addtx", addtx_command))
    application.add_handler(CommandHandler("dbcheck", dbcheck_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º (inline –∫–Ω–æ–ø–∫–∏)
    application.add_handler(CallbackQueryHandler(handle_amount_selection, pattern=r'^amount_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥ (inline –∫–Ω–æ–ø–∫–∏)
    application.add_handler(CallbackQueryHandler(handle_service_selection, pattern=r'^service_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º (inline –∫–Ω–æ–ø–∫–∏)
    application.add_handler(CallbackQueryHandler(handle_stats_callback, pattern=r'^stats_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏ –∏ —Å—É–º–º—ã)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (Context7 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è)
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å manual lifecycle management —Å–æ–≥–ª–∞—Å–Ω–æ Context7
    logger.info("Starting bot...")
    
    async def run_bot():
        """Manual lifecycle management —Å–æ–≥–ª–∞—Å–Ω–æ Context7 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º"""
        nonlocal keep_alive_task
        
        try:
            # Manual initialization
            await application.initialize()
            await application.start()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling
            max_retries = 3
            for attempt in range(max_retries):
                try:
                    await application.updater.start_polling()
                    break  # –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω
                except Exception as e:
                    if "Conflict" in str(e) and "getUpdates" in str(e):
                        logger.warning(f"üîÑ Telegram API conflict detected (attempt {attempt + 1}/{max_retries})")
                        if attempt < max_retries - 1:
                            logger.info("‚è≥ Waiting 10 seconds for old instance to shutdown...")
                            await asyncio.sleep(10)
                            continue
                        else:
                            logger.error("‚ùå Failed to resolve Telegram API conflict after all retries")
                            raise
                    else:
                        raise  # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–º
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ keep-alive –ü–û–°–õ–ï –∑–∞–ø—É—Å–∫–∞ event loop
            if os.getenv('RENDER') and setup_render_keep_alive:
                try:
                    keep_alive_coro = setup_render_keep_alive()
                    keep_alive_task = asyncio.create_task(keep_alive_coro)
                    logger.info("‚úÖ Render keep-alive activated after event loop start")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Keep-alive setup failed: {e}")
            elif os.getenv('RENDER'):
                logger.warning("‚ö†Ô∏è Running on Render but keep-alive module not available")
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
            logger.info("ü§ñ Bot is running... Press Ctrl+C to stop")
            try:
                # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
                while True:
                    await asyncio.sleep(1)
            except KeyboardInterrupt:
                logger.info("Received interrupt signal, shutting down gracefully...")
                
        finally:
            # Manual shutdown
            logger.info("üîÑ Starting graceful shutdown...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º keep-alive –∑–∞–¥–∞—á—É
            if keep_alive_task and not keep_alive_task.done():
                keep_alive_task.cancel()
                try:
                    await keep_alive_task
                except asyncio.CancelledError:
                    logger.info("Keep-alive task cancelled")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º render keep-alive instance
            if os.getenv('RENDER') and render_keep_alive:
                render_keep_alive.stop()
            
            # Manual shutdown sequence
            await application.updater.stop()
            await application.stop()
            await application.shutdown()
            
            logger.info("‚úÖ Graceful shutdown completed")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    try:
        asyncio.run(run_bot())
    except Exception as e:
        logger.error(f"Bot error: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º lock —Ñ–∞–π–ª
        lock_file = '/tmp/qr_bot.lock' if os.getenv('RENDER') else None
        if lock_file and os.path.exists(lock_file):
            try:
                os.remove(lock_file)
                logger.info("üóëÔ∏è Lock file removed")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Could not remove lock file: {e}")
        
        logger.info("Bot stopped.")

if __name__ == '__main__':
    main()
