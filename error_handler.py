#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Error Handler and Validation System for QR Payment Bot
–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ QR –ø–ª–∞—Ç–µ–∂–µ–π
"""

import logging
from telegram import Update
from telegram.ext import ContextTypes
from telegram.error import TelegramError, NetworkError, BadRequest, TimedOut
from functools import wraps
import traceback

logger = logging.getLogger(__name__)

class PaymentValidationError(Exception):
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    pass

def error_handler(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö"""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        try:
            return await func(update, context, *args, **kwargs)
        except PaymentValidationError as e:
            logger.warning(f"Validation error in {func.__name__}: {e}")
            await send_user_error(update, f"‚ùå {str(e)}")
        except (NetworkError, TimedOut) as e:
            logger.error(f"Network error in {func.__name__}: {e}")
            await send_user_error(update, "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except BadRequest as e:
            logger.error(f"Bad request in {func.__name__}: {e}")
            await send_user_error(update, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
        except Exception as e:
            logger.error(f"Unexpected error in {func.__name__}: {e}\n{traceback.format_exc()}")
            await send_user_error(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await notify_admin(context, f"Error in {func.__name__}: {str(e)}")
    return wrapper

async def send_user_error(update: Update, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        if update.callback_query:
            await update.callback_query.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
            await update.callback_query.message.reply_text(f"{message}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        elif update.message:
            await update.message.reply_text(f"{message}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    except Exception as e:
        logger.error(f"Failed to send error message to user: {e}")

async def notify_admin(context: ContextTypes.DEFAULT_TYPE, message: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ"""
    try:
        admin_id = context.bot_data.get('admin_id')
        if admin_id:
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"üö® <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:</b>\n\n{message}",
                parse_mode='HTML'
            )
    except Exception as e:
        logger.error(f"Failed to notify admin: {e}")

def validate_amount(amount_str: str) -> float:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        clean_amount = amount_str.replace(',', '.').replace(' ', '').replace('Kƒç', '').replace('kƒç', '')
        amount = float(clean_amount)
        
        if amount <= 0:
            raise PaymentValidationError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        if amount > 1000000:
            raise PaymentValidationError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1,000,000 Kƒç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–µ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –º–µ—Å—Ç–∞
        if len(str(amount).split('.')[-1]) > 2:
            raise PaymentValidationError("–ú–∞–∫—Å–∏–º—É–º 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π")
        
        return amount
        
    except ValueError:
        raise PaymentValidationError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1250 –∏–ª–∏ 1250.50)")

def validate_service_key(service_key: str, available_services: dict) -> str:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–ª—é—á —É—Å–ª—É–≥–∏"""
    if service_key not in available_services and service_key != "none":
        raise PaymentValidationError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞")
    return service_key

async def global_error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error("Exception while handling an update:", exc_info=context.error)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    error_message = str(context.error)
    error_type = type(context.error).__name__
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ —Ä–µ–∞–≥–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
    if isinstance(context.error, NetworkError):
        user_message = "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif isinstance(context.error, BadRequest):
        user_message = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start"
    elif isinstance(context.error, TimedOut):
        user_message = "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    else:
        user_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω."
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if isinstance(update, Update) and update.effective_chat:
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=user_message + "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
            )
        except Exception as e:
            logger.error(f"Failed to send error message to user: {e}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    if not isinstance(context.error, (NetworkError, TimedOut)):
        admin_message = f"""
üö® <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ</b>

<b>–¢–∏–ø:</b> {error_type}
<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {error_message}
<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {update.effective_user.id if isinstance(update, Update) and update.effective_user else 'Unknown'}
<b>–ß–∞—Ç:</b> {update.effective_chat.id if isinstance(update, Update) and update.effective_chat else 'Unknown'}

<b>–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:</b>
<code>{traceback.format_exc()}</code>
"""
        await notify_admin(context, admin_message)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
class BotAnalytics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.stats = {
            'total_users': set(),
            'total_payments': 0,
            'total_amount': 0,
            'service_popularity': {},
            'error_count': 0,
            'daily_stats': {}
        }
    
    def log_user(self, user_id: int):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.stats['total_users'].add(user_id)
    
    def log_payment(self, amount: float, service: str):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–ª–∞—Ç–µ–∂"""
        self.stats['total_payments'] += 1
        self.stats['total_amount'] += amount
        
        if service in self.stats['service_popularity']:
            self.stats['service_popularity'][service] += 1
        else:
            self.stats['service_popularity'][service] = 1
    
    def log_error(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É"""
        self.stats['error_count'] += 1
    
    def get_stats_summary(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total_users = len(self.stats['total_users'])
        avg_payment = self.stats['total_amount'] / max(self.stats['total_payments'], 1)
        
        popular_services = sorted(
            self.stats['service_popularity'].items(),
            key=lambda x: x[1],
            reverse=True
        )[:5]
        
        summary = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {total_users}
üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏:</b> {self.stats['total_payments']}
üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {self.stats['total_amount']:.2f} Kƒç
üìà <b>–°—Ä–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂:</b> {avg_payment:.2f} Kƒç
‚ùå <b>–û—à–∏–±–∫–∏:</b> {self.stats['error_count']}

<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>
"""
        
        for service, count in popular_services:
            summary += f"‚Ä¢ {service}: {count}\n"
        
        return summary

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
analytics = BotAnalytics()

# –°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤ –∏ –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
class RateLimiter:
    """–°–∏—Å—Ç–µ–º–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self.user_requests = {}
        self.max_requests_per_minute = 10
    
    def is_allowed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        import time
        current_time = time.time()
        
        if user_id not in self.user_requests:
            self.user_requests[user_id] = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ –º–∏–Ω—É—Ç—ã)
        self.user_requests[user_id] = [
            req_time for req_time in self.user_requests[user_id]
            if current_time - req_time < 60
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.user_requests[user_id]) >= self.max_requests_per_minute:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.user_requests[user_id].append(current_time)
        return True

rate_limiter = RateLimiter()

def rate_limit(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        
        if not rate_limiter.is_allowed(user_id):
            await update.message.reply_text(
                "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º."
            )
            return
        
        return await func(update, context, *args, **kwargs)
    return wrapper
