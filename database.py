#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç PostgreSQL (–¥–ª—è Render) –∏ SQLite (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
"""

import logging
import os
import sqlite3
from datetime import datetime
from typing import Optional, Dict, List, Tuple
from contextlib import contextmanager
from urllib.parse import urlparse

logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATABASE_URL = os.getenv('DATABASE_URL')

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –ë–î –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
if DATABASE_URL and DATABASE_URL.startswith('postgres'):
    DB_TYPE = 'postgresql'
    try:
        import psycopg2
        from psycopg2.extras import RealDictCursor
        import psycopg2.pool
        POSTGRESQL_AVAILABLE = True
        logger.info("üêò PostgreSQL driver loaded successfully")
    except ImportError:
        POSTGRESQL_AVAILABLE = False
        logger.error("‚ùå psycopg2 not found! Install: pip install psycopg2-binary")
        logger.info("üîÑ Falling back to SQLite")
        DB_TYPE = 'sqlite'  # Fallback
else:
    DB_TYPE = 'sqlite'
    POSTGRESQL_AVAILABLE = False

logger.info(f"üìä Database type: {DB_TYPE}")


class Database:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.db_type = DB_TYPE
        
        if self.db_type == 'postgresql' and POSTGRESQL_AVAILABLE:
            self._init_postgresql()
        else:
            self._init_sqlite()
        
        self.init_db()
    
    def _init_postgresql(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL"""
        # –ü–∞—Ä—Å–∏–º DATABASE_URL
        url = urlparse(DATABASE_URL)
        
        self.pg_config = {
            'host': url.hostname,
            'port': url.port or 5432,
            'database': url.path[1:],  # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π /
            'user': url.username,
            'password': url.password,
            'sslmode': 'require'  # Render —Ç—Ä–µ–±—É–µ—Ç SSL
        }
        
        # –°–æ–∑–¥–∞–µ–º connection pool –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        try:
            self.pool = psycopg2.pool.SimpleConnectionPool(
                minconn=1,
                maxconn=10,
                **self.pg_config
            )
            logger.info(f"‚úÖ Connected to PostgreSQL: {self.pg_config['database']}")
        except Exception as e:
            logger.error(f"‚ùå PostgreSQL connection error: {e}")
            raise
    
    def _init_sqlite(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite"""
        self.db_path = os.getenv('DATABASE_PATH', 'bot_stats.db')
        logger.info(f"üìù Using SQLite: {self.db_path}")
    
    @contextmanager
    def get_connection(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
        if self.db_type == 'postgresql':
            conn = self.pool.getconn()
            try:
                yield conn
                conn.commit()
            except Exception as e:
                conn.rollback()
                logger.error(f"Database error: {e}")
                raise
            finally:
                self.pool.putconn(conn)
        else:
            # SQLite
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            try:
                yield conn
                conn.commit()
            except Exception as e:
                conn.rollback()
                logger.error(f"Database error: {e}")
                raise
            finally:
                conn.close()
    
    def _get_cursor(self, conn):
        """–ü–æ–ª—É—á–∏—Ç—å cursor —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º –¥–ª—è —Ç–µ–∫—É—â–µ–π –ë–î"""
        if self.db_type == 'postgresql':
            return conn.cursor(cursor_factory=RealDictCursor)
        else:
            return conn.cursor()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with self.get_connection() as conn:
            cursor = self._get_cursor(conn)
            
            if self.db_type == 'postgresql':
                # PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        user_id BIGINT PRIMARY KEY,
                        username TEXT,
                        first_name TEXT,
                        last_name TEXT,
                        first_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        last_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        total_requests INTEGER DEFAULT 0,
                        is_admin BOOLEAN DEFAULT FALSE
                    )
                ''')
                
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS transactions (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT NOT NULL,
                        amount DECIMAL(10,2) NOT NULL,
                        service TEXT,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (user_id) REFERENCES users(user_id)
                    )
                ''')
                
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS events (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT NOT NULL,
                        event_type TEXT NOT NULL,
                        event_data TEXT,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (user_id) REFERENCES users(user_id)
                    )
                ''')
                
                # –ò–Ω–¥–µ–∫—Å—ã
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_transactions_user ON transactions(user_id)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_transactions_timestamp ON transactions(timestamp)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_events_user ON events(user_id)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_events_type ON events(event_type)')
                
            else:
                # SQLite —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        username TEXT,
                        first_name TEXT,
                        last_name TEXT,
                        first_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        last_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        total_requests INTEGER DEFAULT 0,
                        is_admin BOOLEAN DEFAULT 0
                    )
                ''')
                
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS transactions (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER NOT NULL,
                        amount REAL NOT NULL,
                        service TEXT,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (user_id) REFERENCES users(user_id)
                    )
                ''')
                
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS events (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER NOT NULL,
                        event_type TEXT NOT NULL,
                        event_data TEXT,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (user_id) REFERENCES users(user_id)
                    )
                ''')
                
                # –ò–Ω–¥–µ–∫—Å—ã
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_transactions_user ON transactions(user_id)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_transactions_timestamp ON transactions(timestamp)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_events_user ON events(user_id)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_events_type ON events(event_type)')
            
            conn.commit()
            logger.info(f"Database initialized successfully")
    
    def add_or_update_user(self, user_id: int, username: str = None, 
                          first_name: str = None, last_name: str = None,
                          is_admin: bool = False):
        """–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        with self.get_connection() as conn:
            cursor = self._get_cursor(conn)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('SELECT user_id FROM users WHERE user_id = %s' if self.db_type == 'postgresql' else 'SELECT user_id FROM users WHERE user_id = ?', 
                         (user_id,))
            exists = cursor.fetchone()
            
            if exists:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
                cursor.execute('''
                    UPDATE users 
                    SET username = %s, first_name = %s, last_name = %s, 
                        last_seen = CURRENT_TIMESTAMP, total_requests = total_requests + 1
                    WHERE user_id = %s
                ''' if self.db_type == 'postgresql' else '''
                    UPDATE users 
                    SET username = ?, first_name = ?, last_name = ?, 
                        last_seen = CURRENT_TIMESTAMP, total_requests = total_requests + 1
                    WHERE user_id = ?
                ''', (username, first_name, last_name, user_id))
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
                cursor.execute('''
                    INSERT INTO users (user_id, username, first_name, last_name, is_admin, total_requests)
                    VALUES (%s, %s, %s, %s, %s, 1)
                ''' if self.db_type == 'postgresql' else '''
                    INSERT INTO users (user_id, username, first_name, last_name, is_admin, total_requests)
                    VALUES (?, ?, ?, ?, ?, 1)
                ''', (user_id, username, first_name, last_name, is_admin))
    
    def add_transaction(self, user_id: int, amount: float, service: str = None):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"""
        with self.get_connection() as conn:
            cursor = self._get_cursor(conn)
            cursor.execute('''
                INSERT INTO transactions (user_id, amount, service)
                VALUES (%s, %s, %s)
            ''' if self.db_type == 'postgresql' else '''
                INSERT INTO transactions (user_id, amount, service)
                VALUES (?, ?, ?)
            ''', (user_id, amount, service))
            logger.info(f"Transaction added: user={user_id}, amount={amount}, service={service}")
    
    def add_event(self, user_id: int, event_type: str, event_data: str = None):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"""
        with self.get_connection() as conn:
            cursor = self._get_cursor(conn)
            cursor.execute('''
                INSERT INTO events (user_id, event_type, event_data)
                VALUES (%s, %s, %s)
            ''' if self.db_type == 'postgresql' else '''
                INSERT INTO events (user_id, event_type, event_data)
                VALUES (?, ?, ?)
            ''', (user_id, event_type, event_data))
    
    def get_user_stats(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self.get_connection() as conn:
            cursor = self._get_cursor(conn)
            
            cursor.execute('SELECT * FROM users WHERE user_id = %s' if self.db_type == 'postgresql' else 'SELECT * FROM users WHERE user_id = ?', 
                         (user_id,))
            user = cursor.fetchone()
            
            if not user:
                return None
            
            cursor.execute('SELECT COUNT(*) as count FROM transactions WHERE user_id = %s' if self.db_type == 'postgresql' else 'SELECT COUNT(*) as count FROM transactions WHERE user_id = ?', 
                         (user_id,))
            transactions_count = cursor.fetchone()['count']
            
            cursor.execute('SELECT SUM(amount) as total FROM transactions WHERE user_id = %s' if self.db_type == 'postgresql' else 'SELECT SUM(amount) as total FROM transactions WHERE user_id = ?', 
                         (user_id,))
            total_amount = cursor.fetchone()['total'] or 0
            
            return {
                'user_id': user['user_id'],
                'username': user['username'],
                'first_name': user['first_name'],
                'last_name': user['last_name'],
                'first_seen': user['first_seen'],
                'last_seen': user['last_seen'],
                'total_requests': user['total_requests'],
                'transactions_count': transactions_count,
                'total_amount': float(total_amount)
            }
    
    def get_all_users_stats(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        with self.get_connection() as conn:
            cursor = self._get_cursor(conn)
            
            cursor.execute('''
                SELECT 
                    u.user_id,
                    u.username,
                    u.first_name,
                    u.last_name,
                    u.total_requests,
                    COUNT(t.id) as transactions_count,
                    COALESCE(SUM(t.amount), 0) as total_amount,
                    u.last_seen
                FROM users u
                LEFT JOIN transactions t ON u.user_id = t.user_id
                GROUP BY u.user_id, u.username, u.first_name, u.last_name, u.total_requests, u.last_seen
                ORDER BY u.total_requests DESC
            ''')
            
            return [dict(row) for row in cursor.fetchall()]
    
    def get_total_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        with self.get_connection() as conn:
            cursor = self._get_cursor(conn)
            
            cursor.execute('SELECT COUNT(*) as count FROM users')
            total_users = cursor.fetchone()['count']
            
            cursor.execute('SELECT COUNT(*) as count FROM transactions')
            total_transactions = cursor.fetchone()['count']
            
            cursor.execute('SELECT COALESCE(SUM(amount), 0) as total FROM transactions')
            total_amount = cursor.fetchone()['total']
            
            cursor.execute('SELECT COALESCE(AVG(amount), 0) as avg FROM transactions')
            avg_amount = cursor.fetchone()['avg']
            
            cursor.execute('''
                SELECT COUNT(DISTINCT user_id) as count 
                FROM events 
                WHERE timestamp > CURRENT_TIMESTAMP - INTERVAL '1 day'
            ''' if self.db_type == 'postgresql' else '''
                SELECT COUNT(DISTINCT user_id) as count 
                FROM events 
                WHERE timestamp > datetime('now', '-1 day')
            ''')
            active_24h = cursor.fetchone()['count']
            
            return {
                'total_users': total_users,
                'total_transactions': total_transactions,
                'total_amount': round(float(total_amount), 2),
                'avg_amount': round(float(avg_amount), 2),
                'active_24h': active_24h
            }
    
    def get_recent_transactions(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        with self.get_connection() as conn:
            cursor = self._get_cursor(conn)
            
            cursor.execute('''
                SELECT 
                    t.id,
                    t.user_id,
                    u.username,
                    u.first_name,
                    t.amount,
                    t.service,
                    t.timestamp
                FROM transactions t
                JOIN users u ON t.user_id = u.user_id
                ORDER BY t.timestamp DESC
                LIMIT %s
            ''' if self.db_type == 'postgresql' else '''
                SELECT 
                    t.id,
                    t.user_id,
                    u.username,
                    u.first_name,
                    t.amount,
                    t.service,
                    t.timestamp
                FROM transactions t
                JOIN users u ON t.user_id = u.user_id
                ORDER BY t.timestamp DESC
                LIMIT ?
            ''', (limit,))
            
            return [dict(row) for row in cursor.fetchall()]
    
    def get_popular_services(self, limit: int = 10) -> List[Tuple[str, int]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏"""
        with self.get_connection() as conn:
            cursor = self._get_cursor(conn)
            
            cursor.execute('''
                SELECT service, COUNT(*) as count
                FROM transactions
                WHERE service IS NOT NULL AND service != ''
                GROUP BY service
                ORDER BY count DESC
                LIMIT %s
            ''' if self.db_type == 'postgresql' else '''
                SELECT service, COUNT(*) as count
                FROM transactions
                WHERE service IS NOT NULL AND service != ''
                GROUP BY service
                ORDER BY count DESC
                LIMIT ?
            ''', (limit,))
            
            return [(row['service'], row['count']) for row in cursor.fetchall()]
    
    def get_daily_stats(self, days: int = 7) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º"""
        with self.get_connection() as conn:
            cursor = self._get_cursor(conn)
            
            cursor.execute('''
                SELECT 
                    DATE(timestamp) as date,
                    COUNT(*) as transactions,
                    COALESCE(SUM(amount), 0) as total_amount
                FROM transactions
                WHERE timestamp > CURRENT_TIMESTAMP - INTERVAL '%s days'
                GROUP BY DATE(timestamp)
                ORDER BY date DESC
            ''' if self.db_type == 'postgresql' else '''
                SELECT 
                    DATE(timestamp) as date,
                    COUNT(*) as transactions,
                    COALESCE(SUM(amount), 0) as total_amount
                FROM transactions
                WHERE timestamp > datetime('now', '-' || ? || ' days')
                GROUP BY DATE(timestamp)
                ORDER BY date DESC
            ''', (days,) if self.db_type == 'postgresql' else (days,))
            
            return [dict(row) for row in cursor.fetchall()]
    
    def get_monthly_stats(self, month_offset: int = 0) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü
        
        Args:
            month_offset: 0 = —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü, 1 = –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü, –∏ —Ç.–¥.
        
        Returns:
            Dict —Å –∫–ª—é—á–∞–º–∏: month, year, transactions, total_amount, avg_amount, unique_users
        """
        with self.get_connection() as conn:
            cursor = self._get_cursor(conn)
            
            if self.db_type == 'postgresql':
                cursor.execute('''
                    SELECT 
                        EXTRACT(MONTH FROM timestamp) as month,
                        EXTRACT(YEAR FROM timestamp) as year,
                        COUNT(*) as transactions,
                        COALESCE(SUM(amount), 0) as total_amount,
                        COALESCE(AVG(amount), 0) as avg_amount,
                        COUNT(DISTINCT user_id) as unique_users
                    FROM transactions
                    WHERE 
                        EXTRACT(YEAR FROM timestamp) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '%s months')
                        AND EXTRACT(MONTH FROM timestamp) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '%s months')
                    GROUP BY EXTRACT(MONTH FROM timestamp), EXTRACT(YEAR FROM timestamp)
                ''', (month_offset, month_offset))
            else:
                cursor.execute('''
                    SELECT 
                        CAST(strftime('%m', timestamp) AS INTEGER) as month,
                        CAST(strftime('%Y', timestamp) AS INTEGER) as year,
                        COUNT(*) as transactions,
                        COALESCE(SUM(amount), 0) as total_amount,
                        COALESCE(AVG(amount), 0) as avg_amount,
                        COUNT(DISTINCT user_id) as unique_users
                    FROM transactions
                    WHERE 
                        strftime('%Y-%m', timestamp) = strftime('%Y-%m', date('now', '-' || ? || ' months'))
                    GROUP BY strftime('%Y-%m', timestamp)
                ''', (month_offset,))
            
            result = cursor.fetchone()
            if result:
                return {
                    'month': int(result['month']),
                    'year': int(result['year']),
                    'transactions': result['transactions'],
                    'total_amount': round(float(result['total_amount']), 2),
                    'avg_amount': round(float(result['avg_amount']), 2),
                    'unique_users': result['unique_users']
                }
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                from datetime import datetime, timedelta
                target_date = datetime.now() - timedelta(days=30 * month_offset)
                return {
                    'month': target_date.month,
                    'year': target_date.year,
                    'transactions': 0,
                    'total_amount': 0.0,
                    'avg_amount': 0.0,
                    'unique_users': 0
                }
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        if self.db_type == 'postgresql' and hasattr(self, 'pool'):
            self.pool.closeall()
            logger.info("PostgreSQL connection pool closed")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
db = Database()


if __name__ == '__main__':
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(level=logging.INFO)
    
    print("üß™ Testing database module...")
    print(f"Database type: {db.db_type}")
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.add_or_update_user(123456, 'testuser', 'Test', 'User')
    print("‚úÖ User added")
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    db.add_transaction(123456, 1500.0, 'LAMINACE RAS')
    print("‚úÖ Transaction added")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = db.get_user_stats(123456)
    print(f"‚úÖ User stats: {stats}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total = db.get_total_stats()
    print(f"‚úÖ Total stats: {total}")
    
    print("‚úÖ All tests passed!")
