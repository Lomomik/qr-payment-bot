#!/usr/bin/env python3
"""
Keep-Alive –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ Render
–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞
"""

import asyncio
import aiohttp
import logging
import os
from datetime import datetime

logger = logging.getLogger(__name__)

class RenderKeepAlive:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Render —Å–µ—Ä–≤–∏—Å–∞"""
    
    def __init__(self, app_url: str = None, ping_interval: int = 300):
        """
        :param app_url: URL –≤–∞—à–µ–≥–æ Render –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        :param ping_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
        """
        self.app_url = app_url or os.getenv('RENDER_EXTERNAL_URL', 'http://localhost:8080')
        self.ping_interval = ping_interval
        self.is_running = False
        
    async def ping_self(self):
        """–ü–∏–Ω–≥—É–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π health endpoint"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ClientTimeout —Å–æ–≥–ª–∞—Å–Ω–æ Context7 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º
            timeout = aiohttp.ClientTimeout(
                total=10,           # –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç
                sock_connect=5,     # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–æ–∫–µ—Ç—É
                sock_read=5         # –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è —Å–æ–∫–µ—Ç–∞
            )
            
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(f"{self.app_url}/health") as response:
                    if response.status == 200:
                        logger.info(f"‚úÖ Keep-alive ping successful: {datetime.now().strftime('%H:%M:%S')}")
                        return True
                    else:
                        logger.warning(f"‚ö†Ô∏è Keep-alive ping failed with status: {response.status}")
                        return False
        except asyncio.TimeoutError:
            logger.warning("‚è∞ Keep-alive ping timeout")
            return False
        except aiohttp.ClientConnectorError as e:
            logger.warning(f"üîå Keep-alive connection error: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Keep-alive ping error: {e}")
            return False
    
    async def keep_alive_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª keep-alive"""
        logger.info(f"üöÄ Starting keep-alive service for {self.app_url}")
        logger.info(f"‚è∞ Ping interval: {self.ping_interval // 60} minutes")
        
        self.is_running = True
        
        # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –ø–∏–Ω–≥–æ–º (–¥–∞–µ—Ç –≤—Ä–µ–º—è –±–æ—Ç—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è)
        await asyncio.sleep(30)
        
        while self.is_running:
            await self.ping_self()
            await asyncio.sleep(self.ping_interval)
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç keep-alive –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        if not self.is_running:
            asyncio.create_task(self.keep_alive_loop())
            logger.info("üîÑ Keep-alive task started")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç keep-alive"""
        self.is_running = False
        logger.info("‚èπÔ∏è Keep-alive task stopped")

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
render_keep_alive = RenderKeepAlive()

# Health endpoint –¥–ª—è Flask (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Flask)
def create_flask_health_endpoint():
    """–°–æ–∑–¥–∞–µ—Ç Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å health endpoint"""
    try:
        from flask import Flask
        import threading
        
        app = Flask(__name__)
        
        @app.route('/health')
        def health():
            return {
                "status": "ok", 
                "service": "qr-payment-bot",
                "timestamp": datetime.now().isoformat()
            }, 200
        
        @app.route('/')
        def home():
            return {
                "message": "QR Payment Bot is running",
                "status": "active",
                "timestamp": datetime.now().isoformat()
            }, 200
        
        def run_flask():
            app.run(host='0.0.0.0', port=int(os.getenv('PORT', 8080)), debug=False)
        
        # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        
        logger.info("üåê Flask health endpoint started on port 8080")
        
    except ImportError:
        logger.warning("Flask not available, skipping health endpoint")

# –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –Ω–µ—Ç Flask/FastAPI)
def create_simple_health_endpoint():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä —Å health endpoint"""
    try:
        from http.server import HTTPServer, BaseHTTPRequestHandler
        import json
        import threading
        
        class HealthHandler(BaseHTTPRequestHandler):
            def do_GET(self):
                if self.path == '/health':
                    response = {
                        "status": "ok",
                        "service": "qr-payment-bot",
                        "timestamp": datetime.now().isoformat()
                    }
                elif self.path == '/':
                    response = {
                        "message": "QR Payment Bot is running",
                        "status": "active", 
                        "timestamp": datetime.now().isoformat()
                    }
                else:
                    self.send_response(404)
                    self.end_headers()
                    return
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(response).encode())
            
            def log_message(self, format, *args):
                # –ü–æ–¥–∞–≤–ª—è–µ–º –ª–æ–≥–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞
                pass
        
        def run_simple_server():
            server = HTTPServer(('0.0.0.0', int(os.getenv('PORT', 8080))), HealthHandler)
            server.serve_forever()
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        server_thread = threading.Thread(target=run_simple_server, daemon=True)
        server_thread.start()
        
        logger.info("üåê Simple HTTP health endpoint started on port 8080")
        
    except Exception as e:
        logger.error(f"‚ùå Failed to start simple health endpoint: {e}")

def setup_render_keep_alive(app_url: str = None):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ keep-alive –¥–ª—è Render
    
    :param app_url: URL –≤–∞—à–µ–≥–æ Render –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://your-app.onrender.com)
    :return: –∫–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ asyncio.create_task()
    """
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è Render
    if not app_url:
        app_url = os.getenv('RENDER_EXTERNAL_URL')
        if not app_url and os.getenv('RENDER'):
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL –ø–æ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–∏—Å–∞
            service_name = os.getenv('RENDER_SERVICE_NAME', 'qr-payment-bot')
            app_url = f"https://{service_name}.onrender.com"
    
    if app_url:
        render_keep_alive.app_url = app_url
        logger.info(f"üîß Keep-alive configured for: {app_url}")
    
    # –°–æ–∑–¥–∞–µ–º health endpoint
    if os.getenv('FLASK_APP'):
        create_flask_health_endpoint()
    else:
        create_simple_health_endpoint()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    return render_keep_alive.keep_alive_loop()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    import logging
    logging.basicConfig(level=logging.INFO)
    
    setup_render_keep_alive("https://your-app.onrender.com")
    
    # –≠–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    try:
        asyncio.run(asyncio.sleep(3600))  # –†–∞–±–æ—Ç–∞–µ–º —á–∞—Å
    except KeyboardInterrupt:
        print("Stopping...")
        render_keep_alive.stop()
