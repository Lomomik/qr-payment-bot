#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Admin Notification and Analytics System for QR Payment Bot
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞ QR –ø–ª–∞—Ç–µ–∂–µ–π
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from telegram.constants import ParseMode
import json
import os

logger = logging.getLogger(__name__)

class AdminNotificationSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    def __init__(self, admin_id: int):
        self.admin_id = admin_id
        self.notification_settings = {
            'new_payments': True,
            'errors': True,
            'daily_summary': True,
            'user_milestones': True  # 10, 50, 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ç.–¥.
        }
    
    async def notify_new_payment(self, context: ContextTypes.DEFAULT_TYPE, user_id: int, 
                               username: str, amount: float, service: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ"""
        if not self.notification_settings['new_payments']:
            return
        
        try:
            message = f"""
üí≥ <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})
üí∞ <b>–°—É–º–º–∞:</b> {amount} Kƒç
üéØ <b>–£—Å–ª—É–≥–∞:</b> {service}
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}

#payment #–Ω–æ–≤—ã–π_–ø–ª–∞—Ç–µ–∂
"""
            
            await context.bot.send_message(
                chat_id=self.admin_id,
                text=message,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"Failed to send payment notification: {e}")
    
    async def notify_new_user(self, context: ContextTypes.DEFAULT_TYPE, user_id: int, 
                            username: str, total_users: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤–∞–∂–Ω—ã—Ö –≤–µ—Ö–∞—Ö
            milestones = [10, 25, 50, 100, 250, 500, 1000]
            if total_users in milestones:
                message = f"""
üéâ <b>–í–µ—Ö–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!</b>

üë• <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}
üÜï <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})

#milestone #–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
"""
            else:
                message = f"""
üëã <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>

üë§ {username} (ID: {user_id})
üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}

#–Ω–æ–≤—ã–π_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
"""
            
            await context.bot.send_message(
                chat_id=self.admin_id,
                text=message,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"Failed to send new user notification: {e}")
    
    async def notify_error(self, context: ContextTypes.DEFAULT_TYPE, error_type: str, 
                         error_message: str, user_id: int = None):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        if not self.notification_settings['errors']:
            return
        
        try:
            message = f"""
üö® <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ</b>

üî¥ <b>–¢–∏–ø:</b> {error_type}
üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {error_message}
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_id or '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}

#error #–æ—à–∏–±–∫–∞
"""
            
            await context.bot.send_message(
                chat_id=self.admin_id,
                text=message,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"Failed to send error notification: {e}")
    
    async def send_daily_summary(self, context: ContextTypes.DEFAULT_TYPE, stats: Dict):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞"""
        if not self.notification_settings['daily_summary']:
            return
        
        try:
            message = f"""
üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞</b>
üìÖ {datetime.now().strftime('%d.%m.%Y')}

üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏ –∑–∞ –¥–µ–Ω—å:</b> {stats.get('daily_payments', 0)}
üí∞ <b>–°—É–º–º–∞ –∑–∞ –¥–µ–Ω—å:</b> {stats.get('daily_amount', 0):.2f} Kƒç
üë• <b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {stats.get('new_users', 0)}
üìà <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {stats.get('active_users', 0)}

<b>–¢–æ–ø —É—Å–ª—É–≥–∏ –¥–Ω—è:</b>
{self._format_top_services(stats.get('top_services', {}))}

#daily_summary #—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"""
            
            await context.bot.send_message(
                chat_id=self.admin_id,
                text=message,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"Failed to send daily summary: {e}")
    
    def _format_top_services(self, services: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–ø —É—Å–ª—É–≥–∏"""
        if not services:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        formatted = []
        for service, count in sorted(services.items(), key=lambda x: x[1], reverse=True)[:5]:
            formatted.append(f"‚Ä¢ {service}: {count}")
        
        return "\n".join(formatted) if formatted else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

class AdvancedAnalytics:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    def __init__(self):
        self.data_file = "bot_analytics.json"
        self.data = self._load_data()
    
    def _load_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"Failed to load analytics data: {e}")
        
        return {
            'users': {},
            'payments': [],
            'daily_stats': {},
            'service_stats': {},
            'error_log': []
        }
    
    def _save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"Failed to save analytics data: {e}")
    
    def log_user_activity(self, user_id: int, username: str, action: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_key = str(user_id)
        current_time = datetime.now().isoformat()
        
        if user_key not in self.data['users']:
            self.data['users'][user_key] = {
                'username': username,
                'first_seen': current_time,
                'last_seen': current_time,
                'total_actions': 0,
                'payments_created': 0
            }
        
        self.data['users'][user_key]['username'] = username  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
        self.data['users'][user_key]['last_seen'] = current_time
        self.data['users'][user_key]['total_actions'] += 1
        
        if action == 'payment_created':
            self.data['users'][user_key]['payments_created'] += 1
        
        self._save_data()
    
    def log_payment(self, user_id: int, amount: float, service: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø–ª–∞—Ç–µ–∂"""
        payment_data = {
            'user_id': user_id,
            'amount': amount,
            'service': service,
            'timestamp': datetime.now().isoformat(),
            'date': datetime.now().strftime('%Y-%m-%d')
        }
        
        self.data['payments'].append(payment_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ª—É–≥
        if service in self.data['service_stats']:
            self.data['service_stats'][service] += 1
        else:
            self.data['service_stats'][service] = 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        today = datetime.now().strftime('%Y-%m-%d')
        if today not in self.data['daily_stats']:
            self.data['daily_stats'][today] = {
                'payments': 0,
                'amount': 0,
                'unique_users': set()
            }
        
        self.data['daily_stats'][today]['payments'] += 1
        self.data['daily_stats'][today]['amount'] += amount
        self.data['daily_stats'][today]['unique_users'].add(user_id)
        
        self._save_data()
    
    def get_user_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        total_users = len(self.data['users'])
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        week_ago = datetime.now() - timedelta(days=7)
        active_users = 0
        
        for user_data in self.data['users'].values():
            last_seen = datetime.fromisoformat(user_data['last_seen'])
            if last_seen >= week_ago:
                active_users += 1
        
        return {
            'total_users': total_users,
            'active_users_week': active_users,
            'new_users_today': self._count_new_users_today()
        }
    
    def get_payment_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π"""
        today = datetime.now().strftime('%Y-%m-%d')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_payments = [p for p in self.data['payments'] if p['date'] == today]
        today_amount = sum(p['amount'] for p in today_payments)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_payments = len(self.data['payments'])
        total_amount = sum(p['amount'] for p in self.data['payments'])
        avg_payment = total_amount / max(total_payments, 1)
        
        return {
            'total_payments': total_payments,
            'total_amount': total_amount,
            'avg_payment': avg_payment,
            'today_payments': len(today_payments),
            'today_amount': today_amount
        }
    
    def get_service_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ª—É–≥"""
        return dict(sorted(
            self.data['service_stats'].items(),
            key=lambda x: x[1],
            reverse=True
        ))
    
    def _count_new_users_today(self) -> int:
        """–°—á–∏—Ç–∞–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.now().date()
        count = 0
        
        for user_data in self.data['users'].values():
            first_seen = datetime.fromisoformat(user_data['first_seen']).date()
            if first_seen == today:
                count += 1
        
        return count

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    user_id = update.effective_user.id
    admin_id = int(os.getenv('ADMIN_TELEGRAM_ID', 0))
    
    if user_id != admin_id:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    analytics = context.bot_data.get('analytics')
    if not analytics:
        await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return
    
    user_stats = analytics.get_user_stats()
    payment_stats = analytics.get_payment_stats()
    service_stats = analytics.get_service_stats()
    
    message = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {user_stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ–¥–µ–ª—è): {user_stats['active_users_week']}
‚Ä¢ –ù–æ–≤—ã–µ —Å–µ–≥–æ–¥–Ω—è: {user_stats['new_users_today']}

üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {payment_stats['total_payments']}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {payment_stats['total_amount']:.2f} Kƒç
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂: {payment_stats['avg_payment']:.2f} Kƒç
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {payment_stats['today_payments']} ({payment_stats['today_amount']:.2f} Kƒç)

üéØ <b>–¢–æ–ø —É—Å–ª—É–≥–∏:</b>
"""
    
    for service, count in list(service_stats.items())[:5]:
        message += f"‚Ä¢ {service}: {count}\n"
    
    keyboard = [
        [
            InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ],
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh_stats"),
            InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export_data")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

async def admin_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    admin_id = int(os.getenv('ADMIN_TELEGRAM_ID', 0))
    
    if user_id != admin_id:
        await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    if query.data == "admin_refresh_stats":
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await admin_stats(update, context)
    
    elif query.data == "admin_detailed_stats":
        await show_detailed_stats(query, context)
    
    elif query.data == "admin_settings":
        await show_admin_settings(query, context)
    
    elif query.data == "admin_export_data":
        await export_analytics_data(query, context)

async def show_detailed_stats(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    analytics = context.bot_data.get('analytics')
    if not analytics:
        await query.edit_message_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    week_stats = []
    for i in range(7):
        date = (datetime.now() - timedelta(days=i)).strftime('%Y-%m-%d')
        day_data = analytics.data['daily_stats'].get(date, {})
        payments = day_data.get('payments', 0)
        amount = day_data.get('amount', 0)
        week_stats.append(f"‚Ä¢ {date}: {payments} –ø–ª–∞—Ç–µ–∂–µ–π ({amount:.0f} Kƒç)")
    
    message = f"""
üìà <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:</b>
{chr(10).join(week_stats)}

üîÑ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å 1+ –ø–ª–∞—Ç–µ–∂–æ–º: {len([u for u in analytics.data['users'].values() if u['payments_created'] > 0])}
‚Ä¢ –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ: {get_top_users(analytics.data['users'])}
"""
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_refresh_stats")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

def get_top_users(users_data: Dict) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    sorted_users = sorted(
        users_data.items(),
        key=lambda x: x[1]['total_actions'],
        reverse=True
    )[:3]
    
    result = []
    for user_id, data in sorted_users:
        username = data.get('username', 'Unknown')
        actions = data['total_actions']
        result.append(f"{username} ({actions})")
    
    return ", ".join(result) if result else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

async def show_admin_settings(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    message = """
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:
"""
    
    keyboard = [
        [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–∞—Ö", callback_data="toggle_payment_notifications")],
        [InlineKeyboardButton("üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö", callback_data="toggle_error_notifications")],
        [InlineKeyboardButton("üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞", callback_data="toggle_daily_summary")],
        [InlineKeyboardButton("üéØ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–µ—Ö–∞—Ö", callback_data="toggle_milestone_notifications")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_refresh_stats")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

async def export_analytics_data(query, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    analytics = context.bot_data.get('analytics')
    if not analytics:
        await query.edit_message_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º CSV —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
        import csv
        from io import StringIO
        
        output = StringIO()
        writer = csv.writer(output)
        writer.writerow(['–î–∞—Ç–∞', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–°—É–º–º–∞', '–£—Å–ª—É–≥–∞'])
        
        for payment in analytics.data['payments']:
            writer.writerow([
                payment['timestamp'],
                payment['user_id'],
                payment['amount'],
                payment['service']
            ])
        
        csv_content = output.getvalue()
        output.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        from io import BytesIO
        file_buffer = BytesIO(csv_content.encode('utf-8'))
        file_buffer.name = f"analytics_{datetime.now().strftime('%Y%m%d')}.csv"
        
        await context.bot.send_document(
            chat_id=query.message.chat_id,
            document=file_buffer,
            filename=f"analytics_{datetime.now().strftime('%Y%m%d')}.csv",
            caption="üìä –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã"
        )
        
        await query.edit_message_text("‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ñ–∞–π–ª–æ–º.")
        
    except Exception as e:
        logger.error(f"Failed to export analytics data: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
def setup_admin_system(application, admin_id: int):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã
    admin_notifications = AdminNotificationSystem(admin_id)
    analytics = AdvancedAnalytics()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bot_data
    application.bot_data['admin_notifications'] = admin_notifications
    application.bot_data['analytics'] = analytics
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    application.add_handler(CommandHandler('admin', admin_stats))
    application.add_handler(CallbackQueryHandler(admin_callback_handler, pattern='^admin_'))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–≤–æ–¥–∫–∏
    from telegram.ext import JobQueue
    job_queue = application.job_queue
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00
    job_queue.run_daily(
        send_daily_summary_job,
        time=datetime.strptime('23:00', '%H:%M').time(),
        name='daily_summary'
    )

async def send_daily_summary_job(context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
    try:
        admin_notifications = context.bot_data.get('admin_notifications')
        analytics = context.bot_data.get('analytics')
        
        if admin_notifications and analytics:
            today = datetime.now().strftime('%Y-%m-%d')
            daily_data = analytics.data['daily_stats'].get(today, {})
            
            stats = {
                'daily_payments': daily_data.get('payments', 0),
                'daily_amount': daily_data.get('amount', 0),
                'new_users': analytics._count_new_users_today(),
                'active_users': len(daily_data.get('unique_users', set())),
                'top_services': analytics.get_service_stats()
            }
            
            await admin_notifications.send_daily_summary(context, stats)
    except Exception as e:
        logger.error(f"Failed to send daily summary: {e}")
