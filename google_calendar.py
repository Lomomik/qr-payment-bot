#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Calendar API
–ü–æ–ª—É—á–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ—Ü–µ–¥—É—Ä
"""

import os
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
import json
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google.oauth2 import service_account
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env.test')

logger = logging.getLogger(__name__)

# –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Google Calendar
SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä –∏ —Ü–µ–Ω (CZK)
PROCEDURE_PRICES = {
    # –£—Å–ª—É–≥–∏ –¥–ª—è –±—Ä–æ–≤–µ–π
    '√∫prava oboƒç√≠': 800,
    '√∫prava a barven√≠ oboƒç√≠': 1000,
    '√∫prava': 800,
    'barven√≠ oboƒç√≠': 600,
    'zesvƒõtlen√≠ oboƒç√≠': 1200,
    'zesvƒõtlen√≠ s √∫pravou': 1400,
    'zesvƒõtlen√≠ s √∫pravou a tonov√°n√≠m': 1600,
    'laminace oboƒç√≠': 1400,
    'laminace s √∫pravou': 1600,
    'laminace s √∫pravou a tonov√°n√≠m': 1800,
    
    # –£—Å–ª—É–≥–∏ –¥–ª—è —Ä–µ—Å–Ω–∏—Ü
    'laminace ≈ôas': 1500,
    'barven√≠ ≈ôas': 500,
    'botox ≈ôas': 1600,
    
    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
    'laminace ≈ôas + √∫prava oboƒç√≠': 2000,
    'laminace ≈ôas + barven√≠ oboƒç√≠': 1800,
    'laminace ≈ôas + √∫prava a barven√≠ oboƒç√≠': 2200,
    'laminace ≈ôas + zesvƒõtlen√≠ oboƒç√≠': 2400,
    'laminace oboƒç√≠ a ≈ôas': 2500,
    
    # –î–µ–ø–∏–ª—è—Ü–∏—è –∏ —É—Ö–æ–¥
    'depilace obliƒçeje': 800,
    'depilace horn√≠ ret': 300,
    'depilace brady': 400,
    
    # –ö—Ä–∞—Å–æ—Ç–∞ –∏ —Å—Ç–∏–ª—å
    'l√≠ƒçen√≠': 1200,
    '√∫ƒçes': 1000,
    'l√≠ƒçen√≠ & √∫ƒçes': 2000,
    'svatebn√≠ l√≠ƒçen√≠': 2500,
    'veƒçern√≠ l√≠ƒçen√≠': 1800,
    
    # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    'konzultace': 500,
    'konzultace + n√°vrh': 800,
}

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä (–¥–ª—è –ø–æ–∏—Å–∫–∞)
PROCEDURE_ALIASES = {
    'oboƒç√≠': '√∫prava oboƒç√≠',
    '≈ôasy': 'laminace ≈ôas',
    'barven√≠': 'barven√≠ oboƒç√≠',
    'zesvƒõtlen√≠': 'zesvƒõtlen√≠ oboƒç√≠',
    'laminace': 'laminace ≈ôas',
    'l√≠ƒçen√≠ svatebn√≠': 'svatebn√≠ l√≠ƒçen√≠',
    'veƒçern√≠': 'veƒçern√≠ l√≠ƒçen√≠',
    'depilace': 'depilace obliƒçeje',
    'konzultace n√°vrh': 'konzultace + n√°vrh',
}

class GoogleCalendarService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Calendar"""
    
    def __init__(self):
        self.service = None
        self.creds = None
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.auth_type = os.getenv('GOOGLE_CALENDAR_TYPE', 'oauth')  # oauth –∏–ª–∏ service_account
        self.calendar_id = os.getenv('GOOGLE_CALENDAR_ID', 'primary')
        
        if self.auth_type == 'service_account':
            self.service_account_file = os.getenv('GOOGLE_SERVICE_ACCOUNT_FILE', 'service-account.json')
        else:
            self.credentials_file = os.getenv('GOOGLE_CREDENTIALS_FILE', 'credentials.json')
            self.token_file = 'token.json'
        
    def authenticate(self) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Calendar"""
        try:
            if self.auth_type == 'service_account':
                return self._authenticate_service_account()
            else:
                return self._authenticate_oauth()
                
        except FileNotFoundError as e:
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            logger.info("üìã –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ REAL_GOOGLE_CALENDAR_SETUP.md")
            return False
        except Exception as e:
            logger.error(f"‚ùå Google Calendar authentication failed: {e}")
            logger.info("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ REAL_GOOGLE_CALENDAR_SETUP.md")
            return False
    
    def _authenticate_service_account(self) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Service Account (–¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞)"""
        if not os.path.exists(self.service_account_file):
            logger.error(f"Service Account —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.service_account_file}")
            logger.info("–°–æ–∑–¥–∞–π—Ç–µ Service Account —Å–æ–≥–ª–∞—Å–Ω–æ REAL_GOOGLE_CALENDAR_SETUP.md")
            return False
        
        # –°–æ–∑–¥–∞–µ–º credentials –∏–∑ Service Account
        self.creds = service_account.Credentials.from_service_account_file(
            self.service_account_file, scopes=SCOPES)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        self.service = build('calendar', 'v3', credentials=self.creds)
        logger.info("‚úÖ Google Calendar Service Account authentication successful")
        return True
    
    def _authenticate_oauth(self) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ OAuth (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
        if os.path.exists(self.token_file):
            self.creds = Credentials.from_authorized_user_file(self.token_file, SCOPES)
        
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        if not self.creds or not self.creds.valid:
            if self.creds and self.creds.expired and self.creds.refresh_token:
                self.creds.refresh(Request())
            else:
                if not os.path.exists(self.credentials_file):
                    logger.error(f"OAuth credentials —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.credentials_file}")
                    logger.info("–°–æ–∑–¥–∞–π—Ç–µ credentials.json —Å–æ–≥–ª–∞—Å–Ω–æ REAL_GOOGLE_CALENDAR_SETUP.md")
                    return False
                
                flow = InstalledAppFlow.from_client_secrets_file(
                    self.credentials_file, SCOPES)
                self.creds = flow.run_local_server(port=0)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            with open(self.token_file, 'w') as token:
                token.write(self.creds.to_json())
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        self.service = build('calendar', 'v3', credentials=self.creds)
        logger.info("‚úÖ Google Calendar OAuth authentication successful")
        return True
    
    def get_today_events(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        if not self.service:
            if not self.authenticate():
                return []
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
            today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
            tomorrow = today + timedelta(days=1)
            
            # –ó–∞–ø—Ä–æ—Å –∫ API
            events_result = self.service.events().list(
                calendarId=self.calendar_id,
                timeMin=today.isoformat() + 'Z',
                timeMax=tomorrow.isoformat() + 'Z',
                singleEvents=True,
                orderBy='startTime'
            ).execute()
            
            events = events_result.get('items', [])
            logger.info(f"Found {len(events)} events for today from calendar: {self.calendar_id}")
            
            return events
            
        except HttpError as error:
            logger.error(f"Error getting calendar events: {error}")
            if "notFound" in str(error):
                logger.error(f"Calendar ID '{self.calendar_id}' not found or no access")
                logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ GOOGLE_CALENDAR_ID –≤ .env.test")
                if self.auth_type == 'service_account':
                    logger.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Service Account –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é")
            return []
        except Exception as e:
            logger.error(f"Unexpected error getting calendar events: {e}")
            return []

def extract_procedure_from_title(title: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è"""
    if not title:
        return None
    
    title_lower = title.lower().strip()
    
    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
    for procedure in PROCEDURE_PRICES.keys():
        if procedure.lower() in title_lower:
            return procedure
    
    # –ò—â–µ–º —á–µ—Ä–µ–∑ –∞–ª–∏–∞—Å—ã
    for alias, procedure in PROCEDURE_ALIASES.items():
        if alias.lower() in title_lower:
            return procedure
    
    return None

def get_procedure_price(procedure: str) -> Optional[int]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –ø—Ä–æ—Ü–µ–¥—É—Ä—ã"""
    return PROCEDURE_PRICES.get(procedure.lower())

def format_event_info(event: Dict) -> Tuple[str, Optional[str], Optional[int]]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    title = event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    start = event.get('start', {})
    if 'dateTime' in start:
        start_time = datetime.fromisoformat(start['dateTime'].replace('Z', '+00:00'))
        time_str = start_time.strftime('%H:%M')
    elif 'date' in start:
        time_str = '–í–µ—Å—å –¥–µ–Ω—å'
    else:
        time_str = '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∏ —Ü–µ–Ω—É
    procedure = extract_procedure_from_title(title)
    price = get_procedure_price(procedure) if procedure else None
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if procedure and price:
        display_text = f"üïê {time_str} | {procedure.title()} - {price} CZK"
    else:
        display_text = f"üïê {time_str} | {title} - –¶–µ–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
    
    return display_text, procedure, price

def parse_events_for_payment(events: List[Dict]) -> List[Dict]:
    """–ü–∞—Ä—Å–∏—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã"""
    payment_options = []
    
    for event in events:
        display_text, procedure, price = format_event_info(event)
        
        if procedure and price:
            payment_options.append({
                'display_text': display_text,
                'procedure': procedure,
                'price': price,
                'event_id': event.get('id', ''),
                'event_title': event.get('summary', '')
            })
    
    return payment_options

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API)
def get_mock_today_events() -> List[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    now = datetime.now()
    
    mock_events = [
        {
            'id': 'test1',
            'summary': 'Laminace ≈ôas + √∫prava oboƒç√≠ - Anna',
            'start': {'dateTime': (now.replace(hour=9, minute=0)).isoformat() + 'Z'},
            'end': {'dateTime': (now.replace(hour=10, minute=30)).isoformat() + 'Z'}
        },
        {
            'id': 'test2', 
            'summary': 'Zesvƒõtlen√≠ s √∫pravou a tonov√°n√≠m - Marie',
            'start': {'dateTime': (now.replace(hour=11, minute=0)).isoformat() + 'Z'},
            'end': {'dateTime': (now.replace(hour=12, minute=30)).isoformat() + 'Z'}
        },
        {
            'id': 'test3',
            'summary': 'L√≠ƒçen√≠ & √∫ƒçes - Petra',
            'start': {'dateTime': (now.replace(hour=14, minute=0)).isoformat() + 'Z'},
            'end': {'dateTime': (now.replace(hour=16, minute=0)).isoformat() + 'Z'}
        },
        {
            'id': 'test4',
            'summary': 'Konzultace + n√°vrh - Elena',
            'start': {'dateTime': (now.replace(hour=16, minute=30)).isoformat() + 'Z'},
            'end': {'dateTime': (now.replace(hour=17, minute=30)).isoformat() + 'Z'}
        }
    ]
    
    return mock_events

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ)
calendar_service = GoogleCalendarService()

if __name__ == '__main__':
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Calendar –º–æ–¥—É–ª—è")
    
    # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–æ–∫-—Å–æ–±—ã—Ç–∏–π
    mock_events = get_mock_today_events()
    print(f"\nüìÖ –ù–∞–π–¥–µ–Ω–æ {len(mock_events)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π:")
    
    payment_options = parse_events_for_payment(mock_events)
    for option in payment_options:
        print(f"  {option['display_text']}")
    
    # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä
    test_titles = [
        "Laminace ≈ôas - Anna",
        "√öprava a barven√≠ oboƒç√≠ - Marie", 
        "Konzultace nƒõco",
        "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º"
    ]
    
    print(f"\nüîç –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä:")
    for title in test_titles:
        procedure = extract_procedure_from_title(title)
        price = get_procedure_price(procedure) if procedure else None
        print(f"  '{title}' ‚Üí {procedure} ‚Üí {price} CZK")
