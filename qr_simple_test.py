#!/usr/bin/env python3
"""
–ü–†–û–°–¢–ê–Ø —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –±–µ–∑ Google Calendar
–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import logging
import qrcode
from io import BytesIO
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¢–ï–°–¢–û–í–´–ï –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env.test')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_TELEGRAM_ID = os.getenv('ADMIN_TELEGRAM_ID')
OWNER_NAME = os.getenv('OWNER_NAME', 'ULIANA EMELINA (TEST)')
ACCOUNT_NUMBER = os.getenv('ACCOUNT_NUMBER', '3247217010/3030')
IBAN = 'CZ3230300000003247217010'

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
user_stats = {}

# –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–∏–º–∏—Ç–∞—Ü–∏—è Google Calendar)
MOCK_CALENDAR_EVENTS = [
    {
        'time': '09:00',
        'procedure': 'laminace ≈ôas + √∫prava oboƒç√≠',
        'client': 'Anna',
        'price': 2200
    },
    {
        'time': '11:00', 
        'procedure': 'zesvƒõtlen√≠ s √∫pravou a tonov√°n√≠m',
        'client': 'Marie',
        'price': 1600
    },
    {
        'time': '14:00',
        'procedure': 'l√≠ƒçen√≠ & √∫ƒçes',
        'client': 'Petra', 
        'price': 2000
    },
    {
        'time': '16:30',
        'procedure': 'laminace ≈ôas',
        'client': 'Elena',
        'price': 1500
    }
]

# –£—Å–ª—É–≥–∏ —Å–∞–ª–æ–Ω–∞
SERVICES = {
    'uprava_barveni': 'üåø √öPRAVA A BARVEN√ç',
    'uprava': 'üåø √öPRAVA',
    'laminace_ras': 'üëÅÔ∏è LAMINACE ≈òAS',
    'barveni_ras': 'üëÅÔ∏è BARVEN√ç ≈òAS',
    'liceni_uces': 'üëÑ L√çƒåEN√ç & √öƒåES',
    'liceni': 'üëÑ L√çƒåEN√ç',
}

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [KeyboardButton('üí∞ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã')],
        [KeyboardButton('‚ÑπÔ∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å—á–µ—Ç–∞'), KeyboardButton('‚ùì –ü–æ–º–æ—â—å')]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

def get_calendar_events_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    for event in MOCK_CALENDAR_EVENTS:
        display_text = f"üïê {event['time']} | {event['procedure'].title()} | {event['client']} - {event['price']} CZK"
        callback_data = f"calendar_{event['price']}_{event['procedure']}"
        keyboard.append([InlineKeyboardButton(display_text, callback_data=callback_data)])
    
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    keyboard.append([InlineKeyboardButton("‚ûñ‚ûñ‚ûñ –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚ûñ‚ûñ‚ûñ", callback_data="separator")])
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.append([InlineKeyboardButton("üí∞ –í—ã–±—Ä–∞—Ç—å —Å—É–º–º—É –≤—Ä—É—á–Ω—É—é", callback_data="manual_amount")])
    keyboard.append([InlineKeyboardButton("üõçÔ∏è –í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É –∏ —Å—É–º–º—É", callback_data="manual_service")])
    
    return InlineKeyboardMarkup(keyboard)

def get_amount_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º –≤—ã–±–æ—Ä–æ–º —Å—É–º–º—ã"""
    keyboard = []
    amounts = range(500, 1900, 100)
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    row = []
    for amount in amounts:
        row.append(InlineKeyboardButton(f"{amount} CZK", callback_data=f"amount_{amount}"))
        if len(row) == 3:
            keyboard.append(row)
            row = []
    
    if row:
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É", callback_data="amount_custom")])
    
    return InlineKeyboardMarkup(keyboard)

def get_services_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —É—Å–ª—É–≥"""
    keyboard = []
    
    for service_key, service_name in SERVICES.items():
        keyboard.append([InlineKeyboardButton(service_name, callback_data=f"service_{service_key}")])
    
    keyboard.append([InlineKeyboardButton("‚ùå –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏", callback_data="service_none")])
    
    return InlineKeyboardMarkup(keyboard)

def generate_qr_code(amount: float, service_msg: str = None) -> BytesIO:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    if amount == int(amount):
        formatted_amount = str(int(amount))
    else:
        formatted_amount = f"{amount:.2f}".replace('.', ',')
    
    qr_text = f"SPD*1.0*ACC:{IBAN}*RN:{OWNER_NAME.upper()}*AM:{formatted_amount}*CC:CZK"
    
    if service_msg:
        qr_text += f"*MSG:{service_msg}"
    
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(qr_text)
    qr.make(fit=True)
    
    img = qr.make_image(fill_color="black", back_color="white")
    
    bio = BytesIO()
    img.save(bio, 'PNG')
    bio.seek(0)
    
    return bio

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_stats[user_id] = user_stats.get(user_id, 0) + 1
    
    await update.message.reply_text(
        'üß™ **–¢–ï–°–¢–û–í–ê–Ø –í–ï–†–°–ò–Ø –ë–û–¢–ê –° –ö–ê–õ–ï–ù–î–ê–†–ï–ú** üß™\n'
        'üëÑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ–ø–ª–∞—Ç—ã —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã No√©me!\n\n'
        'üí∞ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥.\n'
        'üìÖ –ù–æ–≤–∏–Ω–∫–∞: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –≤—Å—Ç—Ä–µ—á!\n\n'
        'üì± –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n'
        '‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å—Ç—Ä–µ—á—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ QR-–∫–æ–¥ –≤—Ä—É—á–Ω—É—é\n'
        '‚Ä¢ –ö–ª–∏–µ–Ω—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç QR-–∫–æ–¥ —Å–≤–æ–∏–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º\n'
        '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n\n'
        'üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:',
        reply_markup=get_main_keyboard(),
        parse_mode='Markdown'
    )

async def payment_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    user_id = update.effective_user.id
    user_stats[user_id] = user_stats.get(user_id, 0) + 1
    
    await update.message.reply_text(
        'üåø <b>–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã</b>\n\n'
        'üìÖ <b>–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:</b>\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å—Ç—Ä–µ—á—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞\n'
        '–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥\n\n'
        'üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:</b>',
        reply_markup=get_calendar_events_keyboard(),
        parse_mode='HTML'
    )
    
    context.user_data['waiting_for_payment_option'] = True

async def handle_calendar_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    query = update.callback_query
    await query.answer()
    
    if not context.user_data.get('waiting_for_payment_option'):
        await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Å–æ–±—ã—Ç–∏—è.')
        return
    
    try:
        parts = query.data.split('_', 2)
        if len(parts) != 3:
            raise ValueError("Invalid callback data format")
        
        _, price_str, procedure = parts
        amount = float(price_str)
        
        service_msg = procedure.upper()
        qr_image = generate_qr_code(amount, service_msg)
        
        formatted_amount = f"{amount:,.2f}".replace(',', ' ').replace('.', ',')
        
        await query.delete_message()
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=qr_image,
            caption=f'üåø QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥ —Å–∞–ª–æ–Ω–∞ üß™\n\n'
                   f'üìÖ <b>–ò–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:</b> {procedure.title()}\n'
                   f'üí∞ <b>–°—É–º–º–∞:</b> {formatted_amount} CZK\n'
                   f'üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {OWNER_NAME}\n'
                   f'üè¶ <b>–°—á–µ—Ç:</b> {ACCOUNT_NUMBER}\n\n'
                   f'üì± –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –∫–ª–∏–µ–Ω—Ç—É\n'
                   f'‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–¥ –≤ —Å–≤–æ–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n\n'
                   f'üß™ <b>–¢–ï–°–¢–û–í–ê–Ø –í–ï–†–°–ò–Ø</b> - –∏–º–∏—Ç–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è!',
            reply_markup=get_main_keyboard(),
            parse_mode='HTML'
        )
        
        context.user_data['waiting_for_payment_option'] = False
        
        logger.info(f"TEST BOT: Calendar QR code generated for procedure: {procedure}, amount: {amount} CZK, user: {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"Error processing calendar selection: {e}")
        await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è.')

async def handle_payment_option_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    if not context.user_data.get('waiting_for_payment_option'):
        await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä –æ–ø—Ü–∏–∏.')
        return
    
    if query.data == 'separator':
        return
    elif query.data == 'manual_amount':
        context.user_data['waiting_for_payment_option'] = False
        context.user_data['waiting_for_amount'] = True
        
        await query.edit_message_text(
            'üí∞ <b>–í—ã–±–æ—Ä —Å—É–º–º—ã</b>\n\n'
            'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:',
            reply_markup=get_amount_keyboard(),
            parse_mode='HTML'
        )
    elif query.data == 'manual_service':
        context.user_data['waiting_for_payment_option'] = False
        context.user_data['waiting_for_service'] = True
        
        await query.edit_message_text(
            'üõçÔ∏è <b>–í—ã–±–æ—Ä —É—Å–ª—É–≥–∏</b>\n\n'
            'üëá –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞:',
            reply_markup=get_services_keyboard(),
            parse_mode='HTML'
        )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    
    if text == 'üí∞ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã':
        await payment_command(update, context)
        return
    elif text == '‚ÑπÔ∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å—á–µ—Ç–∞':
        await update.message.reply_text(
            f'üìã **–†–ï–ö–í–ò–ó–ò–¢–´ –°–ß–ï–¢–ê –°–ê–õ–û–ù–ê (–¢–ï–°–¢)**\n\n'
            f'üë§ **–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** {OWNER_NAME}\n'
            f'üè¶ **–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞:** {ACCOUNT_NUMBER}\n'
            f'üåç **IBAN:** {IBAN}\n'
            f'üí± **–í–∞–ª—é—Ç–∞:** CZK (—á–µ—à—Å–∫–∏–µ –∫—Ä–æ–Ω—ã)\n\n'
            f'üí∞ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        return
    elif text == '‚ùì –ü–æ–º–æ—â—å':
        await update.message.reply_text(
            'üìã **–ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –°–û–¢–†–£–î–ù–ò–ö–ê (–¢–ï–°–¢)**\n\n'
            '**–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥:**\n'
            '1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí∞ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã"\n'
            '2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å—Ç—Ä–µ—á—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é\n'
            '3Ô∏è‚É£ –ü–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ –∫–ª–∏–µ–Ω—Ç—É\n'
            '4Ô∏è‚É£ –ö–ª–∏–µ–Ω—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–¥ –≤ —Å–≤–æ–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n\n'
            'üí° QR-–∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!\n\n'
            'üß™ **–¢–ï–°–¢–ò–†–£–ï–ú –ò–ù–¢–ï–ì–†–ê–¶–ò–Æ –° –ö–ê–õ–ï–ù–î–ê–†–ï–ú**',
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    if context.user_data.get('waiting_for_amount'):
        try:
            amount_text = update.message.text.strip().replace(',', '.')
            amount = float(amount_text)
            
            if amount <= 0 or amount > 1000000:
                await update.message.reply_text('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ 1,000,000 CZK')
                return
            
            context.user_data['amount'] = amount
            context.user_data['waiting_for_amount'] = False
            context.user_data['waiting_for_service'] = True
            
            formatted_amount = f"{amount:,.2f}".replace(',', ' ').replace('.', ',')
            
            await update.message.reply_text(
                f'üí∞ –°—É–º–º–∞: {formatted_amount} CZK\n\n'
                'üåø –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤ –ø–ª–∞—Ç–µ–∂–µ:',
                reply_markup=get_services_keyboard(),
                parse_mode='HTML'
            )
            
        except ValueError:
            await update.message.reply_text('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞: 500, 1000.50')
    else:
        await update.message.reply_text(
            '‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n\n'
            'üß™ **–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º**',
            reply_markup=get_main_keyboard()
        )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not found!")
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.test")
        return
    
    print("üß™ –ó–∞–ø—É—Å–∫–∞–µ–º –ü–†–û–°–¢–£–Æ —Ç–µ—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞...")
    print(f"ü§ñ –ë–æ—Ç: {BOT_TOKEN[:10]}...")
    print(f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {OWNER_NAME}")
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_calendar_selection, pattern=r'^calendar_'))
    application.add_handler(CallbackQueryHandler(handle_payment_option_selection, pattern=r'^(manual_amount|manual_service|separator)$'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    logger.info("Starting SIMPLE test bot...")
    print("‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
